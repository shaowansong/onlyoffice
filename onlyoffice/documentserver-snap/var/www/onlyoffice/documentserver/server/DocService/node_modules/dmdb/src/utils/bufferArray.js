"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var BufferArray = function() {
    function t() {
        this.bufferArray = new Array(), this.length = 0;
    }
    return t.prototype.putBuffer = function(t, i, s) {
        var h;
        0 !== s && (h = new Node(t, i, s), this.currentNode ? this.bufferArray.push(h) : this.currentNode = h, 
        this.length += s);
    }, t.prototype.readDmBuffer = function(t, i) {
        for (var s, h = 0; h < i && this.currentNode; ) s = this.currentNode.readDmBuffer(t, i - h), 
        0 === this.currentNode.length && this.next(), h += s, this.length -= s;
        return h;
    }, t.prototype.readBuffer = function(t, i, s) {
        for (var h, n = 0; n < s && this.currentNode; ) h = this.currentNode.readBuffer(t, i, s), 
        0 === this.currentNode.length && this.next(), n += h, this.length -= h, i += h;
        return n;
    }, t.prototype.readWritable = function(t, i) {
        for (var s, h = 0; h < i && this.currentNode; ) s = this.currentNode.readWritable(t, i - h), 
        0 === this.currentNode.length && this.next(), h += s, this.length -= s;
        return h;
    }, t.prototype.append = function(t) {
        if (0 !== t.length) {
            for (var i; i = t.currentNode; ) this.addNode(i), t.next();
            t.length = 0;
        }
    }, t.prototype.next = function() {
        this.currentNode = this.bufferArray.shift();
    }, t.prototype.addNode = function(t) {
        0 !== t.length && (this.currentNode ? this.bufferArray.push(t) : this.currentNode = t, 
        this.length += t.length);
    }, t;
}();

exports.BufferArray = BufferArray;

var Node = function() {
    function t(t, i, s) {
        this.buf = t, this.start = i, this.length = s;
    }
    return t.prototype.readDmBuffer = function(t, i) {
        return i = this.length > i ? i : this.length, t.qt(this.buf.subarray(this.start, this.start + i)), 
        this.start += i, this.length -= i, i;
    }, t.prototype.readBuffer = function(t, i, s) {
        return s = this.length > s ? s : this.length, t = t.fill(this.buf.subarray(this.start, this.start + s), i, i + s), 
        this.start += s, this.length -= s, s;
    }, t.prototype.readWritable = function(t, i) {
        return i = this.length > i ? i : this.length, t.write(this.buf.subarray(this.start, this.start + i)), 
        this.start += i, this.length -= i, i;
    }, t;
}();