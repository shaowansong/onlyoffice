"use strict";

var __awaiter = this && this.__awaiter || function(r, s, a, u) {
    return new (a = a || Promise)(function(t, e) {
        function n(r) {
            try {
                c(u.next(r));
            } catch (r) {
                e(r);
            }
        }
        function i(r) {
            try {
                c(u.throw(r));
            } catch (r) {
                e(r);
            }
        }
        function c(r) {
            var e;
            r.done ? t(r.value) : ((e = r.value) instanceof a ? e : new a(function(r) {
                r(e);
            })).then(n, i);
        }
        c((u = u.apply(r, s || [])).next());
    });
}, __generator = this && this.__generator || function(t, n) {
    var i, c, s, a = {
        label: 0,
        sent: function() {
            if (1 & s[0]) throw s[1];
            return s[1];
        },
        trys: [],
        ops: []
    }, r = {
        next: e(0),
        throw: e(1),
        return: e(2)
    };
    return "function" == typeof Symbol && (r[Symbol.iterator] = function() {
        return this;
    }), r;
    function e(e) {
        return function(r) {
            return function(e) {
                if (i) throw new TypeError("Generator is already executing.");
                for (;a; ) try {
                    if (i = 1, c && (s = 2 & e[0] ? c.return : e[0] ? c.throw || ((s = c.return) && s.call(c), 
                    0) : c.next) && !(s = s.call(c, e[1])).done) return s;
                    switch (c = 0, s && (e = [ 2 & e[0], s.value ]), e[0]) {
                      case 0:
                      case 1:
                        s = e;
                        break;

                      case 4:
                        return a.label++, {
                            value: e[1],
                            done: !1
                        };

                      case 5:
                        a.label++, c = e[1], e = [ 0 ];
                        continue;

                      case 7:
                        e = a.ops.pop(), a.trys.pop();
                        continue;

                      default:
                        if (!(s = 0 < (s = a.trys).length && s[s.length - 1]) && (6 === e[0] || 2 === e[0])) {
                            a = 0;
                            continue;
                        }
                        if (3 === e[0] && (!s || e[1] > s[0] && e[1] < s[3])) {
                            a.label = e[1];
                            break;
                        }
                        if (6 === e[0] && a.label < s[1]) {
                            a.label = s[1], s = e;
                            break;
                        }
                        if (s && a.label < s[2]) {
                            a.label = s[2], a.ops.push(e);
                            break;
                        }
                        s[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    e = n.call(t, a);
                } catch (r) {
                    e = [ 6, r ], c = 0;
                } finally {
                    i = s = 0;
                }
                if (5 & e[0]) throw e[1];
                return {
                    value: e[0] ? e[1] : void 0,
                    done: !0
                };
            }([ e, r ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var connection_1 = require("../../driver/connection"), rwCounter_1 = require("./rwCounter"), ep_1 = require("../../desc/ep"), properties_1 = require("../../desc/properties"), const_1 = require("../../desc/const"), error_1 = require("../../driver/error"), middleware_1 = require("../middleware"), stringUtil_1 = require("../../utils/stringUtil"), RWUtil = function() {
    function f() {}
    return f.connect = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return e.props.set("loginMode", const_1.Const.LOGIN_MODE_PRIMARY_ONLY + ""), e.conn_prop_loginMode = const_1.Const.LOGIN_MODE_PRIMARY_ONLY, 
                    [ 4, e.do_openConnection(t) ];

                  case 1:
                    return (e = r.sent()).middlewares.rwInfo.rwCounter = rwCounter_1.RWCounter.getInstance(e, e.standbyCount), 
                    [ 4, this.connectStandby(e) ];

                  case 2:
                    return r.sent(), [ 2, e ];
                }
            });
        });
    }, f.reconnect = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return e.middlewares.rwInfo ? [ 4, this.removeStandby(e) ] : [ 2 ];

                  case 1:
                    return r.sent(), [ 4, e.do_reconnect() ];

                  case 2:
                    return r.sent(), e.middlewares.rwInfo.cleanup(), e.middlewares.rwInfo.rwCounter = rwCounter_1.RWCounter.getInstance(e, e.standbyCount), 
                    [ 4, this.connectStandby(e) ];

                  case 3:
                    return r.sent(), [ 2 ];
                }
            });
        });
    }, f.recoverStandby = function(n) {
        return __awaiter(this, void 0, void 0, function() {
            var e, t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return n.closed || this.isStandbyAlive(n) ? [ 2 ] : (e = Date.now(), (t = n.conn_prop_rwStandbyRecoverTime) <= 0 || e - n.middlewares.rwInfo.tryRecoverTs < t ? [ 2 ] : [ 4, this.connectStandby(n) ]);

                  case 1:
                    return r.sent(), n.middlewares.rwInfo.tryRecoverTs = e, [ 2 ];
                }
            });
        });
    }, f.connectStandby = function(i) {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, n;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4, this.chooseValidStandby(i) ];

                  case 1:
                    if (!(e = r.sent())) return [ 2 ];
                    r.label = 2;

                  case 2:
                    return r.trys.push([ 2, 4, , 5 ]), (t = new properties_1.Properties(i.props)).set("host", e.host), 
                    t.set("port", e.port.toString()), t.set("rwStandby", "true"), t.setAny("epGroup", void 0), 
                    t.set("loginMode", const_1.Const.LOGIN_MODE_STANDBY_ONLY.toString()), t.set("switchTimes", "0"), 
                    n = i.middlewares.rwInfo, [ 4, connection_1.Connection.newInstanceOfConnection(t).do_openConnection() ];

                  case 3:
                    return n.connStandby = r.sent(), i.middlewares.rwInfo.connStandby.svrMode === const_1.Const.SERVER_MODE_STANDBY && i.middlewares.rwInfo.connStandby.svrStat === const_1.Const.SERVER_STATUS_OPEN || this.removeStandby(i), 
                    [ 3, 5 ];

                  case 4:
                    return r.sent(), [ 3, 5 ];

                  case 5:
                    return [ 2 ];
                }
            });
        });
    }, f.afterExceptionOnStandby = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return t instanceof error_1.DBError && t.errCode === error_1.DBError.ECJS_COMMUNICATION_ERROR().errCode ? [ 4, this.removeStandby(e) ] : [ 3, 2 ];

                  case 1:
                    r.sent(), r.label = 2;

                  case 2:
                    return [ 2 ];
                }
            });
        });
    }, f.execute = function(u, o, _, h) {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, n, i, c, s, a;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return [ 4, f.recoverStandby(u) ];

                  case 1:
                    r.sent(), f.distributeSql(u, o), t = !1, r.label = 2;

                  case 2:
                    return r.trys.push([ 2, 17, , 21 ]), [ 4, _() ];

                  case 3:
                    switch (e = r.sent(), n = u.middlewares.rwInfo.connCurrent, n.lastExecInfo.retSqlType) {
                      case const_1.Const.SQL_TYPE_COMMIT:
                      case const_1.Const.SQL_TYPE_ROLLBACK:
                      case const_1.Const.SQL_TYPE_SET_CURSCH:
                      case const_1.Const.SQL_TYPE_SET_SESS_TRAN:
                      case const_1.Const.SQL_TYPE_SET_TIME_ZONE:
                      case const_1.Const.SQL_TYPE_SAVEPNT:
                        return [ 3, 4 ];

                      case const_1.Const.SQL_TYPE_DML_CALL:
                        return [ 3, 9 ];

                      case const_1.Const.SQL_TYPE_DML_SELECT:
                        return [ 3, 14 ];
                    }
                    return [ 3, 15 ];

                  case 4:
                    if (!(i = n !== u ? u : u.middlewares.rwInfo.connStandby)) return [ 3, 8 ];
                    r.label = 5;

                  case 5:
                    return r.trys.push([ 5, 7, , 8 ]), [ 4, h(i) ];

                  case 6:
                    return r.sent(), [ 3, 8 ];

                  case 7:
                    return r.sent(), [ 3, 8 ];

                  case 8:
                    return [ 3, 16 ];

                  case 9:
                    if ("SP_SET_PARA_VALUE" !== (c = o.trim().split(/[ (]/, 2)[0]).toUpperCase() && "SP_SET_SESSION_READONLY" !== c.toUpperCase()) return [ 3, 13 ];
                    if (!(s = n !== u ? u : u.middlewares.rwInfo.connStandby)) return [ 3, 13 ];
                    r.label = 10;

                  case 10:
                    return r.trys.push([ 10, 12, , 13 ]), [ 4, h(s) ];

                  case 11:
                    return r.sent(), [ 3, 13 ];

                  case 12:
                    return r.sent(), [ 3, 13 ];

                  case 13:
                    return [ 3, 16 ];

                  case 14:
                    return !u.conn_prop_rwHA || n !== u.middlewares.rwInfo.connStandby || u.lastExecInfo.rsDatas && 0 !== u.lastExecInfo.rsDatas.length || (t = !0), 
                    [ 3, 16 ];

                  case 15:
                    return [ 3, 16 ];

                  case 16:
                    return [ 3, 21 ];

                  case 17:
                    return a = r.sent(), u.middlewares.rwInfo.connCurrent !== u.middlewares.rwInfo.connStandby ? [ 3, 19 ] : [ 4, f.afterExceptionOnStandby(u, a) ];

                  case 18:
                    return r.sent(), t = !0, [ 3, 20 ];

                  case 19:
                    throw a;

                  case 20:
                    return [ 3, 21 ];

                  case 21:
                    return t ? (u.middlewares.rwInfo.toPrimary(), u.middlewares.rwInfo.connCurrent = u, 
                    [ 2, h(u) ]) : [ 2, e ];
                }
            });
        });
    }, f.checkReadonly = function(r, e) {
        var t, n = !0;
        return e && !r.conn_prop_rwIgnoreSql && (t = e.trim().split(" ", 2)[0], n = !(stringUtil_1.StringUtil.equalsIgnoreCase(t, "insert") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "update") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "delete") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "create") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "truncate") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "drop") || stringUtil_1.StringUtil.equalsIgnoreCase(t, "alter"))), 
        n;
    }, f.distributeSql = function(r, e) {
        var t = this.isStandbyAlive(r) && this.checkReadonly(r, e) ? r.middlewares.rwInfo.distribute === middleware_1.RWSiteEnum.PRIMARY && !r.trxFinish || r.middlewares.rwInfo.distribute === middleware_1.RWSiteEnum.STANDBY && !r.middlewares.rwInfo.connStandby.trxFinish ? r.middlewares.rwInfo.distribute : r.isoLevel !== const_1.Const.CLI_SERIALIZABLE ? r.middlewares.rwInfo.toAny() : r.middlewares.rwInfo.toPrimary() : r.middlewares.rwInfo.toPrimary();
        return r.middlewares.rwInfo.connCurrent = t === middleware_1.RWSiteEnum.PRIMARY ? r : r.middlewares.rwInfo.connStandby, 
        t;
    }, f.isStandbyAlive = function(r) {
        return void 0 !== r.middlewares.rwInfo.connStandby && !r.middlewares.rwInfo.connStandby.closed;
    }, f.removeStandby = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    if (!e.middlewares.rwInfo.connStandby) return [ 3, 5 ];
                    r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 3, , 4 ]), [ 4, e.middlewares.rwInfo.connStandby.do_close() ];

                  case 2:
                    return r.sent(), [ 3, 4 ];

                  case 3:
                    return r.sent(), [ 3, 4 ];

                  case 4:
                    e.middlewares.rwInfo.connStandby = void 0, r.label = 5;

                  case 5:
                    return [ 2 ];
                }
            });
        });
    }, f.chooseValidStandby = function(_) {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, n, i, c, s, a, u, o;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    t = e = null, r.label = 1;

                  case 1:
                    return r.trys.push([ 1, 3, , 8 ]), [ 4, _.do_executeInner(_.malini2 ? this.SQL_SELECT_STANDBY2 : this.SQL_SELECT_STANDBY) ];

                  case 2:
                    return e = r.sent(), [ 3, 8 ];

                  case 3:
                    r.sent(), r.label = 4;

                  case 4:
                    return r.trys.push([ 4, 6, , 7 ]), [ 4, _.do_executeInner(_.malini2 ? this.SQL_SELECT_STANDBY : this.SQL_SELECT_STANDBY2) ];

                  case 5:
                    return e = r.sent(), [ 3, 7 ];

                  case 6:
                    return n = r.sent(), t = n, [ 3, 7 ];

                  case 7:
                    return [ 3, 8 ];

                  case 8:
                    return r.trys.push([ 8, 17, 18, 20 ]), e ? [ 4, e.resultSet.do_getRowCount() ] : [ 3, 10 ];

                  case 9:
                    return c = r.sent(), [ 3, 11 ];

                  case 10:
                    c = 0, r.label = 11;

                  case 11:
                    if (!(0 < (i = c))) return [ 3, 16 ];
                    _.middlewares.rwInfo.rwCounter = rwCounter_1.RWCounter.getInstance(_, i), s = 0, 
                    a = _.middlewares.rwInfo.rwCounter.random(i), r.label = 12;

                  case 12:
                    return [ 4, e.resultSet.next() ];

                  case 13:
                    return r.sent() ? s !== a ? [ 3, 15 ] : [ 4, e.resultSet.getRowData() ] : [ 3, 16 ];

                  case 14:
                    return u = r.sent(), [ 2, new ep_1.EP(u[1], u[2]) ];

                  case 15:
                    return s++, [ 3, 12 ];

                  case 16:
                    return [ 3, 20 ];

                  case 17:
                    return o = r.sent(), t = o, [ 3, 20 ];

                  case 18:
                    return [ 4, e.resultSet.do_close() ];

                  case 19:
                    return r.sent(), [ 7 ];

                  case 20:
                    if (t) throw new Error("choose valid standby error!" + t.message);
                    return [ 2, void 0 ];
                }
            });
        });
    }, f.SQL_SELECT_STANDBY = "select distinct mailIni.inst_name, mailIni.INST_IP, mailIni.INST_PORT, archIni.arch_status from  v$arch_status archIni left join (select * from V$DM_MAL_INI) mailIni on archIni.arch_dest = mailIni.inst_name left join V$MAL_LINK_STATUS on CTL_LINK_STATUS  = 'CONNECTED' AND DATA_LINK_STATUS = 'CONNECTED' where archIni.arch_type in ('TIMELY', 'REALTIME') AND  archIni.arch_status = 'VALID'", 
    f.SQL_SELECT_STANDBY2 = "select distinct mailIni.mal_inst_name, mailIni.mal_INST_HOST, mailIni.mal_INST_PORT, archIni.arch_status from v$arch_status archIni left join (select * from V$DM_MAL_INI) mailIni on archIni.arch_dest = mailIni.mal_inst_name left join V$MAL_LINK_STATUS on CTL_LINK_STATUS  = 'CONNECTED' AND DATA_LINK_STATUS = 'CONNECTED' where archIni.arch_type in ('TIMELY', 'REALTIME') AND  archIni.arch_status = 'VALID'", 
    f;
}();

exports.RWUtil = RWUtil;