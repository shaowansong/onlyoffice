"use strict";

var __awaiter = this && this.__awaiter || function(t, h, u, o) {
    return new (u = u || Promise)(function(n, i) {
        function r(t) {
            try {
                s(o.next(t));
            } catch (t) {
                i(t);
            }
        }
        function e(t) {
            try {
                s(o.throw(t));
            } catch (t) {
                i(t);
            }
        }
        function s(t) {
            var i;
            t.done ? n(t.value) : ((i = t.value) instanceof u ? i : new u(function(t) {
                t(i);
            })).then(r, e);
        }
        s((o = o.apply(t, h || [])).next());
    });
}, __generator = this && this.__generator || function(n, r) {
    var e, s, h, u = {
        label: 0,
        sent: function() {
            if (1 & h[0]) throw h[1];
            return h[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: i(0),
        throw: i(1),
        return: i(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function i(i) {
        return function(t) {
            return function(i) {
                if (e) throw new TypeError("Generator is already executing.");
                for (;u; ) try {
                    if (e = 1, s && (h = 2 & i[0] ? s.return : i[0] ? s.throw || ((h = s.return) && h.call(s), 
                    0) : s.next) && !(h = h.call(s, i[1])).done) return h;
                    switch (s = 0, h && (i = [ 2 & i[0], h.value ]), i[0]) {
                      case 0:
                      case 1:
                        h = i;
                        break;

                      case 4:
                        return u.label++, {
                            value: i[1],
                            done: !1
                        };

                      case 5:
                        u.label++, s = i[1], i = [ 0 ];
                        continue;

                      case 7:
                        i = u.ops.pop(), u.trys.pop();
                        continue;

                      default:
                        if (!(h = 0 < (h = u.trys).length && h[h.length - 1]) && (6 === i[0] || 2 === i[0])) {
                            u = 0;
                            continue;
                        }
                        if (3 === i[0] && (!h || i[1] > h[0] && i[1] < h[3])) {
                            u.label = i[1];
                            break;
                        }
                        if (6 === i[0] && u.label < h[1]) {
                            u.label = h[1], h = i;
                            break;
                        }
                        if (h && u.label < h[2]) {
                            u.label = h[2], u.ops.push(i);
                            break;
                        }
                        h[2] && u.ops.pop(), u.trys.pop();
                        continue;
                    }
                    i = r.call(n, u);
                } catch (t) {
                    i = [ 6, t ], s = 0;
                } finally {
                    e = h = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            }([ i, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var statement_1 = require("./statement"), error_1 = require("./error"), db2j_1 = require("../convert/db2j"), middleware_1 = require("../middleware/middleware"), unenumerable_1 = require("../utils/unenumerable"), const_1 = require("../desc/const"), dm_1 = require("../dm"), ResultSet = function() {
    function t(t, i, n, r) {
        var e;
        this.datas = new Array(0), this.datasOffset = -1, this.datasStartPos = 0, this.currentPos = -1, 
        this.totalRowCount = BigInt(0), this.updatable = !1, this.bdta = !1, this.wasNull = !1, 
        this.closed = !1, this.fetchSize = 0, this.metaData = n.result.metaData, "number" == typeof t && i instanceof statement_1.Statement ? (this.constructor_inner(i, i.columns, n.rsDatas || new Array(0)), 
        this.id = t, this.totalRowCount = n.updateCount, this.updatable = n.rsUpdatable, 
        this.bdta = n.rsBdta, e = this.datas.length, this.sizeOfRow = 0 < e ? n.rsSizeof / e : 0, 
        this.updatable) : t instanceof statement_1.Statement && i instanceof Array && (r instanceof Array || void 0 === r) && this.constructor_inner(t, i, r);
    }
    return t.prototype.newMiddlewares = function() {
        this.middlewares = new middleware_1.Middlewares(this.stmt.connection, null, t.nextID++, this.stmt.connection.middlewares);
    }, t.prototype.close = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().resultSet_close(this) : this.do_close();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.close().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
    }, t.prototype.getRow = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().resultSet_getRow(this) : this.do_getRow();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.getRow().then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, void 0);
        });
    }, t.prototype.getRows = function(t, i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().resultSet_getRows(this, t) : this.do_getRows(t);
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.getRows(t).then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, void 0);
        });
    }, t.prototype.getRowCount = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().resultSet_getRowCount(this) : this.do_getRowCount();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.getRowCount().then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, -1);
        });
    }, t.prototype.do_close = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return delete this.conn, delete this.stmt, delete this.columns, delete this.datas, 
                this.closed = !0, [ 2 ];
            });
        });
    }, t.prototype.do_getRow = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, this.next() ];

                  case 1:
                    return [ 2, t.sent() ? this.getRowData() : void 0 ];
                }
            });
        });
    }, t.prototype.do_getRows = function(s) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n, r, e;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (!Number.isSafeInteger(s)) throw error_1.DBError.ECJS_INVALID_PARAM();
                    i = new Array(0), t.label = 1;

                  case 1:
                    return (n = 0 < s--) ? [ 4, this.next() ] : [ 3, 3 ];

                  case 2:
                    n = t.sent(), t.label = 3;

                  case 3:
                    return n ? (e = (r = i).push, [ 4, this.getRowData() ]) : [ 3, 5 ];

                  case 4:
                    return e.apply(r, [ t.sent() ]), [ 3, 1 ];

                  case 5:
                    return [ 2, i ];
                }
            });
        });
    }, t.prototype.do_getRowCount = function() {
        return __awaiter(this, void 0, void 0, function() {
            var i;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return (this.checkClosed(), this.totalRowCount !== const_1.Const.INT64_MAX) ? [ 3, 2 ] : [ 4, (i = this).conn.access.z(this) ];

                  case 1:
                    i.totalRowCount = t.sent(), t.label = 2;

                  case 2:
                    return [ 2, Number(this.totalRowCount) ];
                }
            });
        });
    }, t.prototype.checkClosed = function() {
        if (this.closed) throw error_1.DBError.ECJS_RESULTSET_CLOSED();
    }, t.prototype.constructor_inner = function(t, i, n) {
        this.id = 0, this.stmt = t, this.conn = t.connection, this.columns = i || new Array(0), 
        this.fetchInfo = t.execOpts.fetchInfo, this.datas = n || new Array(0), this.totalRowCount = void 0 === n ? BigInt(0) : BigInt(n.length), 
        this.updatable = !1, this.bdta = !1, this.newMiddlewares(), unenumerable_1.setUnenumerable(this, [ "middlewares", "nextID" ]);
    }, t.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this.checkClosed(), this.totalRowCount === BigInt(0) || BigInt(this.currentPos) >= this.totalRowCount ? [ 2, !1 ] : BigInt(this.currentPos) === this.totalRowCount - BigInt(1) ? (this.currentPos++, 
                    this.datasOffset++, [ 2, !1 ]) : this.currentPos + 1 < this.datasStartPos || this.currentPos + 1 >= this.datasStartPos + this.datas.length ? [ 4, this.fetchData(this.currentPos + 1) ] : [ 3, 2 ];

                  case 1:
                    return t.sent() ? (this.currentPos++, [ 2, !0 ]) : (this.currentPos++, this.datasOffset++, 
                    [ 2, !1 ]);

                  case 2:
                    return this.datasOffset++, this.currentPos++, [ 2, !0 ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, t.prototype.fetchData = function(n) {
        return __awaiter(this, void 0, void 0, function() {
            var i;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, this.conn.access.H(this, n) ];

                  case 1:
                    return i = t.sent(), this.totalRowCount = i.updateCount, i.rsDatas ? (this.datas = i.rsDatas, 
                    this.datasStartPos = n, [ 2, !(this.datasOffset = 0) ]) : [ 2, !1 ];
                }
            });
        });
    }, t.prototype.getRowData = function() {
        return __awaiter(this, void 0, void 0, function() {
            var i, n, r, e, s, h;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (this.stmt.execOpts.outFormat !== dm_1.dmdb.OUT_FORMAT_OBJECT) return [ 3, 5 ];
                    r = new Object(), e = 0, t.label = 1;

                  case 1:
                    return e < this.columns.length ? (i = r, n = this.metaData[e].name, [ 4, this.getColumnData(e) ]) : [ 3, 4 ];

                  case 2:
                    i[n] = t.sent(), t.label = 3;

                  case 3:
                    return e++, [ 3, 1 ];

                  case 4:
                    return [ 2, r ];

                  case 5:
                    r = new Array(this.columns.length), e = 0, t.label = 6;

                  case 6:
                    return e < this.columns.length ? (s = r, h = e, [ 4, this.getColumnData(e) ]) : [ 3, 9 ];

                  case 7:
                    s[h] = t.sent(), t.label = 8;

                  case 8:
                    return e++, [ 3, 6 ];

                  case 9:
                    return [ 2, r ];
                }
            });
        });
    }, t.prototype.getColumnData = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n, r;
            return __generator(this, function(t) {
                return i = this.datas[this.datasOffset][e + 1], n = this.columns[e], r = this.fetchInfo && this.fetchInfo[n.name] ? this.fetchInfo[n.name].type : void 0, 
                [ 2, db2j_1.DB2J.toNaturalJS(i, n, this.conn, r) ];
            });
        });
    }, t.nextID = 0, t;
}();

exports.ResultSet = ResultSet;