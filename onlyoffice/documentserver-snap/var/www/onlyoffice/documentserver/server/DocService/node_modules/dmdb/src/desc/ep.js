"use strict";

var __awaiter = this && this.__awaiter || function(t, c, o, a) {
    return new (o = o || Promise)(function(e, n) {
        function s(t) {
            try {
                i(a.next(t));
            } catch (t) {
                n(t);
            }
        }
        function r(t) {
            try {
                i(a.throw(t));
            } catch (t) {
                n(t);
            }
        }
        function i(t) {
            var n;
            t.done ? e(t.value) : ((n = t.value) instanceof o ? n : new o(function(t) {
                t(n);
            })).then(s, r);
        }
        i((a = a.apply(t, c || [])).next());
    });
}, __generator = this && this.__generator || function(e, s) {
    var r, i, c, o = {
        label: 0,
        sent: function() {
            if (1 & c[0]) throw c[1];
            return c[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: n(0),
        throw: n(1),
        return: n(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function n(n) {
        return function(t) {
            return function(n) {
                if (r) throw new TypeError("Generator is already executing.");
                for (;o; ) try {
                    if (r = 1, i && (c = 2 & n[0] ? i.return : n[0] ? i.throw || ((c = i.return) && c.call(i), 
                    0) : i.next) && !(c = c.call(i, n[1])).done) return c;
                    switch (i = 0, c && (n = [ 2 & n[0], c.value ]), n[0]) {
                      case 0:
                      case 1:
                        c = n;
                        break;

                      case 4:
                        return o.label++, {
                            value: n[1],
                            done: !1
                        };

                      case 5:
                        o.label++, i = n[1], n = [ 0 ];
                        continue;

                      case 7:
                        n = o.ops.pop(), o.trys.pop();
                        continue;

                      default:
                        if (!(c = 0 < (c = o.trys).length && c[c.length - 1]) && (6 === n[0] || 2 === n[0])) {
                            o = 0;
                            continue;
                        }
                        if (3 === n[0] && (!c || n[1] > c[0] && n[1] < c[3])) {
                            o.label = n[1];
                            break;
                        }
                        if (6 === n[0] && o.label < c[1]) {
                            o.label = c[1], c = n;
                            break;
                        }
                        if (c && o.label < c[2]) {
                            o.label = c[2], o.ops.push(n);
                            break;
                        }
                        c[2] && o.ops.pop(), o.trys.pop();
                        continue;
                    }
                    n = s.call(e, o);
                } catch (t) {
                    n = [ 6, t ], i = 0;
                } finally {
                    r = c = 0;
                }
                if (5 & n[0]) throw n[1];
                return {
                    value: n[0] ? n[1] : void 0,
                    done: !0
                };
            }([ n, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var const_1 = require("./const"), EP = function() {
    function e(t, n) {
        this.alive = !1, this.statusRefreshTs = 0, this.serverMode = -1, this.serverStatus = -1, 
        this.dscControl = !1, this.sort = e.SORT_UNKNOWN, this.host = t, this.port = n;
    }
    return e.prototype.connect = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    e.conn_prop_host = this.host, e.conn_prop_port = this.port, e.props.set("host", this.host), 
                    e.props.set("port", this.port.toString()), t.label = 1;

                  case 1:
                    return t.trys.push([ 1, 3, , 4 ]), [ 4, e.do_openConnection() ];

                  case 2:
                    return t.sent(), this.refreshStatus(e, !0), [ 3, 4 ];

                  case 3:
                    throw n = t.sent(), this.refreshStatus(e, !1), n;

                  case 4:
                    return [ 2 ];
                }
            });
        });
    }, e.prototype.getSort = function(t) {
        return !t || Date.now() - this.statusRefreshTs < e.STATUS_VALID_TIME ? this.sort : e.SORT_UNKNOWN;
    }, e.prototype.getServerModeDesc = function(t) {
        switch (t) {
          case const_1.Const.SERVER_MODE_NORMAL:
            return "NORMAL";

          case const_1.Const.SERVER_MODE_PRIMARY:
            return "PRIMARY";

          case const_1.Const.SERVER_MODE_STANDBY:
            return "STANDBY";

          default:
            return "UNKNOW";
        }
    }, e.prototype.getServerStatusDesc = function(t) {
        switch (t) {
          case const_1.Const.SERVER_STATUS_OPEN:
            return "OPEN";

          case const_1.Const.SERVER_STATUS_MOUNT:
            return "MOUNT";

          case const_1.Const.SERVER_STATUS_SUSPEND:
            return "SUSPEND";

          default:
            return "UNKNOW";
        }
    }, e.prototype.toString = function() {
        return this.host + ":" + this.port + " (" + this.getServerModeDesc(this.serverMode) + ", " + this.getServerStatusDesc(this.serverStatus) + (this.dscControl ? ", DSC CONTROL" : "") + "))";
    }, e.prototype.refreshStatus = function(t, n) {
        this.alive = n, this.statusRefreshTs = Date.now(), this.serverMode = n ? t.svrMode : -1, 
        this.serverStatus = n ? t.svrStat : -1, this.dscControl = !!n && t.dscControl, this.sort = n ? this.calcSort(t.conn_prop_loginMode) : e.SORT_SERVER_NOT_ALIVE;
    }, e.prototype.calcSort = function(t) {
        var n = 0;
        switch (t) {
          case const_1.Const.LOGIN_MODE_PRIMARY_FIRST:
            switch (this.serverMode) {
              case const_1.Const.SERVER_MODE_NORMAL:
                n += 10 * e.SORT_NORMAL;
                break;

              case const_1.Const.SERVER_MODE_PRIMARY:
                n += 100 * e.SORT_PRIMARY;
                break;

              case const_1.Const.SERVER_MODE_STANDBY:
                n += e.SORT_STANDBY;
            }
            break;

          case const_1.Const.LOGIN_MODE_STANDBY_FIRST:
            switch (this.serverMode) {
              case const_1.Const.SERVER_MODE_NORMAL:
                n += e.SORT_NORMAL;
                break;

              case const_1.Const.SERVER_MODE_PRIMARY:
                n += 10 * e.SORT_PRIMARY;
                break;

              case const_1.Const.SERVER_MODE_STANDBY:
                n += 100 * e.SORT_STANDBY;
            }
            break;

          case const_1.Const.LOGIN_MODE_PRIMARY_ONLY:
            if (this.serverMode != const_1.Const.SERVER_MODE_PRIMARY) return e.SORT_SERVER_MODE_INVALID;
            n += e.SORT_PRIMARY;
            break;

          case const_1.Const.LOGIN_MODE_STANDBY_ONLY:
            if (this.serverMode != const_1.Const.SERVER_MODE_STANDBY) return e.SORT_SERVER_MODE_INVALID;
            n += e.SORT_STANDBY;
        }
        switch (this.serverStatus) {
          case const_1.Const.SERVER_STATUS_MOUNT:
            n += e.SORT_MOUNT;
            break;

          case const_1.Const.SERVER_STATUS_OPEN:
            n += e.SORT_OPEN;
            break;

          case const_1.Const.SERVER_STATUS_SUSPEND:
            n += e.SORT_SUSPEND;
        }
        return n;
    }, e.STATUS_VALID_TIME = 2e4, e.SORT_SERVER_MODE_INVALID = -1, e.SORT_SERVER_NOT_ALIVE = -2, 
    e.SORT_UNKNOWN = const_1.Const.INT32_MAX, e.SORT_NORMAL = 30, e.SORT_PRIMARY = 20, 
    e.SORT_STANDBY = 10, e.SORT_OPEN = 3, e.SORT_MOUNT = 2, e.SORT_SUSPEND = 1, e;
}();

exports.EP = EP;