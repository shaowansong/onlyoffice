"use strict";

var __awaiter = this && this.__awaiter || function(t, u, o, c) {
    return new (o = o || Promise)(function(i, e) {
        function n(t) {
            try {
                s(c.next(t));
            } catch (t) {
                e(t);
            }
        }
        function r(t) {
            try {
                s(c.throw(t));
            } catch (t) {
                e(t);
            }
        }
        function s(t) {
            var e;
            t.done ? i(t.value) : ((e = t.value) instanceof o ? e : new o(function(t) {
                t(e);
            })).then(n, r);
        }
        s((c = c.apply(t, u || [])).next());
    });
}, __generator = this && this.__generator || function(i, n) {
    var r, s, u, o = {
        label: 0,
        sent: function() {
            if (1 & u[0]) throw u[1];
            return u[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: e(0),
        throw: e(1),
        return: e(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function e(e) {
        return function(t) {
            return function(e) {
                if (r) throw new TypeError("Generator is already executing.");
                for (;o; ) try {
                    if (r = 1, s && (u = 2 & e[0] ? s.return : e[0] ? s.throw || ((u = s.return) && u.call(s), 
                    0) : s.next) && !(u = u.call(s, e[1])).done) return u;
                    switch (s = 0, u && (e = [ 2 & e[0], u.value ]), e[0]) {
                      case 0:
                      case 1:
                        u = e;
                        break;

                      case 4:
                        return o.label++, {
                            value: e[1],
                            done: !1
                        };

                      case 5:
                        o.label++, s = e[1], e = [ 0 ];
                        continue;

                      case 7:
                        e = o.ops.pop(), o.trys.pop();
                        continue;

                      default:
                        if (!(u = 0 < (u = o.trys).length && u[u.length - 1]) && (6 === e[0] || 2 === e[0])) {
                            o = 0;
                            continue;
                        }
                        if (3 === e[0] && (!u || e[1] > u[0] && e[1] < u[3])) {
                            o.label = e[1];
                            break;
                        }
                        if (6 === e[0] && o.label < u[1]) {
                            o.label = u[1], u = e;
                            break;
                        }
                        if (u && o.label < u[2]) {
                            o.label = u[2], o.ops.push(e);
                            break;
                        }
                        u[2] && o.ops.pop(), o.trys.pop();
                        continue;
                    }
                    e = n.call(i, o);
                } catch (t) {
                    e = [ 6, t ], s = 0;
                } finally {
                    r = u = 0;
                }
                if (5 & e[0]) throw e[1];
                return {
                    value: e[0] ? e[1] : void 0,
                    done: !0
                };
            }([ e, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var events_1 = require("events"), error_1 = require("./error"), connection_1 = require("./connection"), dm_1 = require("../dm"), middleware_1 = require("../middleware/middleware"), unenumerable_1 = require("../utils/unenumerable"), deque_1 = require("../utils/deque"), Pool = function() {
    function t(t) {
        this._poolMax = dm_1.dmdb.poolMax, this._poolMin = dm_1.dmdb.poolMin, this._poolTimeout = dm_1.dmdb.poolTimeout, 
        this._queueMax = dm_1.dmdb.queueMax, this._queueRequests = dm_1.dmdb.queueRequests, 
        this._queueTimeout = dm_1.dmdb.queueTimeout, this._testOnBorrow = !1, this._validationQuery = "select 1;", 
        this._connectString = "dm://SYSDBA:SYSDBA@localhost:5236", this._status = dm_1.dmdb.POOL_STATUS_OPEN, 
        this._acquiringConnections = new deque_1.Deque(), this._freeConnections = new deque_1.Deque(), 
        this._connectionQueue = new deque_1.Deque(), this._connectString = t.connectString || t.connectionString || this._connectString, 
        this._poolMax = void 0 !== t.poolMax ? t.poolMax : this._poolMax, this._poolMin = void 0 !== t.poolMin ? t.poolMin : this._poolMin, 
        this._poolTimeout = void 0 !== t.poolTimeout ? t.poolTimeout : this._poolTimeout, 
        this._queueMax = void 0 !== t.queueMax ? t.queueMax : this._queueMax, this._queueRequests = void 0 !== t.queueRequests ? t.queueRequests : this._queueRequests, 
        this._queueTimeout = void 0 !== t.queueTimeout ? t.queueTimeout : this._queueTimeout, 
        this._testOnBorrow = void 0 !== t.testOnBorrow ? t.testOnBorrow : this._testOnBorrow, 
        this._validationQuery = t.validationQuery || this._validationQuery, this._poolAlias = t.poolAlias;
    }
    return t.prototype.newMiddlewares = function() {
        this.middlewares = new middleware_1.Middlewares(null, this._connectProps, t.nextID++, null);
    }, t.prototype.openPool = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, i, n, r;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (t.trys.push([ 0, 6, , 7 ]), this._poolMin < 0 || this._poolMax < 1 || this._poolMin > this._poolMax) throw error_1.DBError.ECJS_INVALID_POOL_NUM();
                    return e = this, [ 4, dm_1.dmdb.parseUrl(this._connectString) ];

                  case 1:
                    e._connectProps = t.sent(), this.newMiddlewares(), unenumerable_1.setUnenumerable(this, [ "middlewares", "nextID" ]), 
                    i = 0, t.label = 2;

                  case 2:
                    return i < this._poolMin ? [ 4, connection_1.PoolConnection.newInstanceOfPoolConnection(this._connectProps, this).openConnection(this._connectProps.getAny("epGroup")) ] : [ 3, 5 ];

                  case 3:
                    n = t.sent(), this._freeConnections.push(n), t.label = 4;

                  case 4:
                    return i++, [ 3, 2 ];

                  case 5:
                    return [ 2, this ];

                  case 6:
                    throw r = t.sent(), this.do_close(), r;

                  case 7:
                    return [ 2 ];
                }
            });
        });
    }, t.prototype.getConnection = function(e) {
        if (void 0 === e) return this.middlewares.valid ? this.middlewares.reset().pool_getConnection(this) : this.do_getConnection();
        if ("function" != typeof e) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.getConnection().then(function(t) {
            e(null, t);
        }).catch(function(t) {
            e(t, void 0);
        });
    }, t.prototype.close = function(e, i) {
        if (void 0 === e && void 0 === i) return this.middlewares.valid ? this.middlewares.reset().pool_close(this) : this.do_close();
        if ("function" == typeof e && void 0 === i) this.close().then(function() {
            e(null);
        }).catch(function(t) {
            e(t);
        }); else {
            if ("number" == typeof e && void 0 === i) return this.middlewares.valid ? this.middlewares.reset().pool_close(this, i) : this.do_close(i);
            if ("number" != typeof e || "function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
            this.close(e).then(function() {
                i(null);
            }).catch(function(t) {
                i(t);
            });
        }
    }, t.prototype.terminate = function(e, i) {
        if (void 0 === e && void 0 === i) return this.close();
        if ("function" == typeof e && void 0 === i) this.close().then(function() {
            e(null);
        }).catch(function(t) {
            e(t);
        }); else {
            if ("number" == typeof e && void 0 === i) return this.close(e);
            if ("number" != typeof e || "function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
            this.close(e).then(function() {
                i(null);
            }).catch(function(t) {
                i(t);
            });
        }
    }, t.prototype.do_getConnection = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, i, s = this;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this._checkPoolStatus(), [ 4, this.getFreeConnection() ];

                  case 1:
                    return (e = t.sent()) ? [ 2, e ] : [ 4, this.makeNewConnection() ];

                  case 2:
                    if (i = t.sent()) return [ 2, i ];
                    if (this._queueRequests && 0 !== this._queueMax) {
                        if (this._queueMax < 0 || this._connectionQueue.length < this._queueMax) return [ 2, new Promise(function(e, i) {
                            var n, r = new events_1.EventEmitter();
                            s._connectionQueue.push(r), 0 < s._queueTimeout && (n = setTimeout(function() {
                                s._connectionQueue.delete(r), i(error_1.DBError.ECJS_POOL_QUEUE_TIMEOUT());
                            }, s._queueTimeout)), r.on("turn", function(t) {
                                clearTimeout(n), process.nextTick(function() {
                                    e(t);
                                });
                            }), r.on("error", function(t) {
                                clearTimeout(n), s._connectionQueue.delete(r), process.nextTick(function() {
                                    i(t);
                                });
                            });
                        }) ];
                        throw error_1.DBError.ECJS_POOL_QUEUE_FULL();
                    }
                    throw error_1.DBError.ECJS_POOL_NO_MORE_CONNECTION();
                }
            });
        });
    }, t.prototype.do_close = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            var e, i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    this._checkPoolStatus(), this._status = dm_1.dmdb.POOL_STATUS_DRAINING, t.label = 1;

                  case 1:
                    t.trys.push([ 1, 7, , 8 ]), e = void 0, t.label = 2;

                  case 2:
                    return (e = this._freeConnections.shift()) ? (e.stopTimer(), [ 4, e.destroy() ]) : [ 3, 4 ];

                  case 3:
                    return t.sent(), [ 3, 2 ];

                  case 4:
                    return (e = this._acquiringConnections.shift()) ? (e.stopTimer(), [ 4, e.destroy() ]) : [ 3, 6 ];

                  case 5:
                    return t.sent(), [ 3, 4 ];

                  case 6:
                    for (this._status = dm_1.dmdb.POOL_STATUS_CLOSED, i = void 0; i = this._connectionQueue.shift(); ) i.emit("error", error_1.DBError.ECJS_POOL_CLOSED());
                    return this.middlewares.log && this.middlewares.log.logWriter.end(), this._poolAlias && dm_1.dmdb.pools.delete(this._poolAlias), 
                    [ 3, 8 ];

                  case 7:
                    throw n = t.sent(), this._status = dm_1.dmdb.POOL_STATUS_OPEN, n;

                  case 8:
                    return [ 2 ];
                }
            });
        });
    }, t.prototype.releaseConnection = function(t) {
        if (this._status !== dm_1.dmdb.POOL_STATUS_CLOSED && this._acquiringConnections.delete(t)) {
            if (0 < this._connectionQueue.length) return this._acquiringConnections.push(t), 
            void this._connectionQueue.shift().emit("turn", t);
            this._freeConnections.push(t), t.startTimer();
        }
    }, t.prototype.eliminateConnection = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return this.connectionsOpen <= this._poolMin || this._acquiringConnections.includes(e) ? e.refreshTimer() : (this._freeConnections.delete(e), 
                e.destroy()), [ 2 ];
            });
        });
    }, t.prototype.testConnection = function(r) {
        return __awaiter(this, void 0, void 0, function() {
            var e, i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return t.trys.push([ 0, 6, , 7 ]), [ 4, r.do_execute(this._validationQuery, [], {
                        resultSet: !0
                    }) ];

                  case 1:
                    return (e = t.sent()).resultSet ? [ 4, e.resultSet.do_getRow() ] : [ 3, 4 ];

                  case 2:
                    return i = t.sent(), [ 4, e.resultSet.do_close() ];

                  case 3:
                    return t.sent(), i ? [ 2, !0 ] : (this.middlewares.logWarn("连接池连接有效性检查失败:没有结果集."), 
                    [ 2, !1 ]);

                  case 4:
                    return this.middlewares.logWarn("连接池连接有效性检查失败:没有结果集."), [ 2, !1 ];

                  case 5:
                    return [ 3, 7 ];

                  case 6:
                    return n = t.sent(), this.middlewares.logWarn("连接池连接有效性检查失败.\n" + n), [ 2, !1 ];

                  case 7:
                    return [ 2 ];
                }
            });
        });
    }, t.prototype.getFreeConnection = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (!(e = this._freeConnections.shift())) return [ 3, 6 ];
                    e.stopTimer(), this._acquiringConnections.push(e), t.label = 1;

                  case 1:
                    return (t.trys.push([ 1, 5, , 6 ]), i = e.closed) ? [ 3, 4 ] : (n = this._testOnBorrow) ? [ 4, this.testConnection(e) ] : [ 3, 3 ];

                  case 2:
                    n = !t.sent(), t.label = 3;

                  case 3:
                    i = n, t.label = 4;

                  case 4:
                    return i ? (this._acquiringConnections.delete(e), e.destroy(), [ 2, this.connectionsOpen >= this._poolMin ? this.getFreeConnection() : this.makeNewConnection() ]) : [ 3, 6 ];

                  case 5:
                    return t.sent(), this._acquiringConnections.delete(e), [ 2, void 0 ];

                  case 6:
                    return [ 2, e ];
                }
            });
        });
    }, t.prototype.makeNewConnection = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (!(this.connectionsOpen < this._poolMax)) return [ 3, 5 ];
                    e = null, t.label = 1;

                  case 1:
                    return t.trys.push([ 1, 3, , 4 ]), e = connection_1.PoolConnection.newInstanceOfPoolConnection(this._connectProps, this), 
                    this._acquiringConnections.push(e), [ 4, e.openConnection(this._connectProps.getAny("epGroup")) ];

                  case 2:
                    return t.sent(), [ 2, e ];

                  case 3:
                    return t.sent(), e && this._acquiringConnections.delete(e), [ 2, void 0 ];

                  case 4:
                    return [ 3, 6 ];

                  case 5:
                    return [ 2, void 0 ];

                  case 6:
                    return [ 2 ];
                }
            });
        });
    }, t.prototype._checkPoolStatus = function() {
        if (this._status === dm_1.dmdb.POOL_STATUS_CLOSED) throw error_1.DBError.ECJS_POOL_CLOSED();
        if (this._status === dm_1.dmdb.POOL_STATUS_DRAINING) throw error_1.DBError.ECJS_POOL_DRAINING();
    }, Object.defineProperty(t.prototype, "connectionsInUse", {
        get: function() {
            return this._acquiringConnections.length;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "connectionsOpen", {
        get: function() {
            return this._acquiringConnections.length + this._freeConnections.length;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "connectionsInQueue", {
        get: function() {
            return this._connectionQueue.length;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "poolMax", {
        get: function() {
            return this._poolMax;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "poolMin", {
        get: function() {
            return this._poolMin;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "status", {
        get: function() {
            return this._status;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "poolAlias", {
        get: function() {
            return this._poolAlias;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "poolTimeout", {
        get: function() {
            return this._poolTimeout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "queueMax", {
        get: function() {
            return this._queueMax;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "queueRequests", {
        get: function() {
            return this._queueRequests;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "queueTimeout", {
        get: function() {
            return this._queueTimeout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "testOnBorrow", {
        get: function() {
            return this._testOnBorrow;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t.prototype, "validationQuery", {
        get: function() {
            return this._validationQuery;
        },
        enumerable: !0,
        configurable: !0
    }), t.nextID = 0, t;
}();

exports.Pool = Pool;