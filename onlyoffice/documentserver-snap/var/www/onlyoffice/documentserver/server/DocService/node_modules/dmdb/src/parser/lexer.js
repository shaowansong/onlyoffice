"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var stringUtil_1 = require("../utils/stringUtil"), lval_1 = require("./lval"), stringReader_1 = require("../utils/stringReader"), Lexer = function() {
    function k(s, t) {
        this.zzState = 0, this.zzLexicalState = k.YYINITIAL, this.zzBuffer = Buffer.alloc(k.ZZ_BUFFERSIZE), 
        this.zzMarkedPos = 0, this.zzCurrentPos = 0, this.zzStartRead = 0, this.zzEndRead = 0, 
        this.yyline = 0, this.yychar = 0, this.yycolumn = 0, this.zzAtEOF = !1, this.zzFinalHighSurrogate = 0, 
        this.ltstr = "", this.isDebug = t, this.zzReader = new stringReader_1.StringReader(s);
    }
    return k.zzUnpackActionNoParams = function() {
        var s = new Array(104);
        return k.zzUnpackAction(k.ZZ_ACTION_PACKED_0, 0, s), s;
    }, k.zzUnpackAction = function(s, t, i) {
        for (var e = 0, a = t, h = s.length; e < h; ) for (var r = s[e++], n = s[e++]; i[a++] = n, 
        0 < --r; ) ;
        return a;
    }, k.zzUnpackRowMapNoParams = function() {
        var s = new Array(104);
        return k.zzUnpackRowMap(k.ZZ_ROWMAP_PACKED_0, 0, s), s;
    }, k.zzUnpackRowMap = function(s, t, i) {
        for (var e = 0, a = t, h = s.length; e < h; ) {
            var r = s[e++] << 16;
            i[a++] = r | s[e++];
        }
        return a;
    }, k.zzUnpackTransNoParams = function() {
        var s = new Array(2208);
        return k.zzUnpackTrans(k.ZZ_TRANS_PACKED_0, 0, s), s;
    }, k.zzUnpackTrans = function(s, t, i) {
        for (var e = 0, a = t, h = s.length; e < h; ) {
            var r = s[e++], n = s[e++];
            for (n--; i[a++] = n, 0 < --r; ) ;
        }
        return a;
    }, k.zzUnpackAttributeNoParams = function() {
        var s = new Array(104);
        return k.zzUnpackAttribute(k.ZZ_ATTRIBUTE_PACKED_0, 0, s), s;
    }, k.zzUnpackAttribute = function(s, t, i) {
        for (var e = 0, a = t, h = s.length; e < h; ) for (var r = s[e++], n = s[e++]; i[a++] = n, 
        0 < --r; ) ;
        return a;
    }, k.prototype.debug = function(s) {
        this.isDebug;
    }, k.prototype.yyerror = function(s) {
        var t = "(line: " + this.yyline + ", column: " + this.yycolumn + ", char: " + this.yychar + ")";
        throw new Error("syntex error" + t + (s ? ": " + s : ""));
    }, k.zzUnpackCMap = function(s) {
        for (var t = new Array(1114112), i = 0, e = 0; i < 208; ) for (var a = s[i++], h = s[i++]; t[e++] = h, 
        0 < --a; ) ;
        return t;
    }, k.prototype.zzRefill = function() {
        var s;
        0 < this.zzStartRead && (this.zzEndRead += this.zzFinalHighSurrogate, this.zzFinalHighSurrogate = 0, 
        this.zzBuffer.copyWithin(0, this.zzStartRead, this.zzEndRead), this.zzEndRead -= this.zzStartRead, 
        this.zzCurrentPos -= this.zzStartRead, this.zzMarkedPos -= this.zzStartRead, this.zzStartRead = 0), 
        this.zzCurrentPos >= this.zzBuffer.length - this.zzFinalHighSurrogate && (s = Buffer.alloc(2 * this.zzBuffer.length), 
        this.zzBuffer.copy(s, 0, 0, this.zzBuffer.length), this.zzBuffer = s, this.zzEndRead += this.zzFinalHighSurrogate, 
        this.zzFinalHighSurrogate = 0);
        var t = this.zzBuffer.length - this.zzEndRead, i = this.zzReader.read(this.zzBuffer, this.zzEndRead, t);
        if (0 === i) throw new Error("Reader returned 0 characters. See JFlex examples for workaround.");
        return !(0 < i) || (this.zzEndRead += i, i === t && stringUtil_1.StringUtil.isHighSurrogate(this.zzBuffer[this.zzEndRead - 1]) && (--this.zzEndRead, 
        this.zzFinalHighSurrogate = 1), !1);
    }, k.prototype.yyclose = function() {
        this.zzAtEOF = !0, this.zzEndRead = this.zzStartRead;
    }, k.prototype.yyreset = function(s) {
        this.zzReader = s, this.zzAtEOF = !1, this.zzEndRead = this.zzStartRead = 0, this.zzCurrentPos = this.zzMarkedPos = 0, 
        this.zzFinalHighSurrogate = 0, this.yyline = this.yychar = this.yycolumn = 0, this.zzLexicalState = k.YYINITIAL, 
        this.zzBuffer.length > k.ZZ_BUFFERSIZE && (this.zzBuffer = new Buffer(k.ZZ_BUFFERSIZE));
    }, k.prototype.yystate = function() {
        return this.zzLexicalState;
    }, k.prototype.yybegin = function(s) {
        this.zzLexicalState = s;
    }, k.prototype.yytext = function() {
        return this.zzBuffer.toString("utf-8", this.zzStartRead, this.zzMarkedPos);
    }, k.prototype.yycharat = function(s) {
        return this.zzBuffer[this.zzStartRead + s];
    }, k.prototype.yylength = function() {
        return this.zzMarkedPos - this.zzStartRead;
    }, k.prototype.zzScanError = function(s) {
        var t = (t = k.ZZ_ERROR_MSG[s]) || k.ZZ_ERROR_MSG[k.ZZ_UNKNOWN_ERROR];
        throw new Error(t);
    }, k.prototype.yypushback = function(s) {
        s > this.yylength() && this.zzScanError(k.ZZ_PUSHBACK_2BIG), this.zzMarkedPos -= s;
    }, k.prototype.yylex = function() {
        for (var s, t, i = this.zzEndRead, e = this.zzBuffer, a = k.ZZ_CMAP, h = k.ZZ_TRANS, r = k.ZZ_ROWMAP, n = k.ZZ_ATTRIBUTE; ;) {
            u = this.zzMarkedPos, this.yychar += u - this.zzStartRead;
            var c, l, u, _ = !1;
            for (v = this.zzStartRead; v < u; v += l) switch (c = e[v], l = stringUtil_1.StringUtil.charCount(c), 
            c) {
              case 11:
              case 12:
              case 133:
              case 8232:
              case 8233:
                this.yyline++, this.yycolumn = 0, _ = !1;
                break;

              case "\r".charCodeAt(0):
                this.yyline++, _ = !(this.yycolumn = 0);
                break;

              case "\n".charCodeAt(0):
                _ ? _ = !1 : (this.yyline++, this.yycolumn = 0);
                break;

              default:
                _ = !1, this.yycolumn += l;
            }
            _ && ((u < i ? e[u] == "\n".charCodeAt(0) : !this.zzAtEOF && (b = this.zzRefill(), 
            i = this.zzEndRead, u = this.zzMarkedPos, e = this.zzBuffer, !b && e[u] == "\n".charCodeAt(0))) && this.yyline--), 
            t = -1, v = this.zzCurrentPos = this.zzStartRead = u, this.zzState = k.ZZ_LEXSTATE[this.zzLexicalState];
            var o = n[this.zzState];
            1 == (1 & o) && (t = this.zzState);
            s: for (;;) {
                if (v < i) s = e[v], v += stringUtil_1.StringUtil.charCount(s); else {
                    if (this.zzAtEOF) {
                        s = k.YYEOF;
                        break s;
                    }
                    this.zzCurrentPos = v, this.zzMarkedPos = u;
                    var b = this.zzRefill(), v = this.zzCurrentPos;
                    if (u = this.zzMarkedPos, e = this.zzBuffer, i = this.zzEndRead, b) {
                        s = k.YYEOF;
                        break s;
                    }
                    s = e[v], v += stringUtil_1.StringUtil.charCount(s);
                }
                var x = h[r[this.zzState] + a[s]];
                if (-1 == x) break s;
                if (this.zzState = x, 1 == (1 & (o = n[this.zzState])) && (t = this.zzState, u = v, 
                8 == (8 & o))) break s;
            }
            if (this.zzMarkedPos = u, s == k.YYEOF && this.zzStartRead == this.zzCurrentPos) switch (this.zzAtEOF = !0, 
            this.zzLexicalState) {
              case k.xc:
                this.debug("<xc><<EOF>>"), this.yybegin(k.YYINITIAL), this.yyerror("unterminated /* comment");

              case 105:
                break;

              case k.xq:
                this.debug("<xq><<EOF>>"), this.yybegin(k.YYINITIAL), this.yyerror("unterminated quoted string");

              case 106:
                break;

              case k.xdq:
                this.debug("<xdq><<EOF>>"), this.yybegin(k.YYINITIAL), this.yyerror("unterminated quoted identifier");

              case 107:
                break;

              case k.xbin:
                this.debug("<xbin><<EOF>>"), this.yybegin(k.YYINITIAL), this.yyerror("unterminated binary string literal");

              case 108:
                break;

              case k.xhex:
                this.debug("<xhex><<EOF>>"), this.yybegin(k.YYINITIAL), this.yyerror("unterminated hexadecimal integer");

              case 109:
                break;

              case k.xq2:
                this.yybegin(k.YYINITIAL), this.yyerror("unterminated q2 string");

              case 110:
                break;

              case k.xq2_2:
                this.yybegin(k.YYINITIAL), this.yyerror("unterminated q2 string");

              case 111:
                break;

              default:
                return null;
            } else switch (t < 0 ? t : k.ZZ_ACTION[t]) {
              case 1:
                return this.debug("{other}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 44:
                break;

              case 2:
                this.debug("{xq_start}"), this.yybegin(k.xq), this.ltstr = "";

              case 45:
                break;

              case 3:
                this.debug("{xdq_start}"), this.yybegin(k.xdq), this.ltstr = "", this.ltstr += this.yytext();

              case 46:
                break;

              case 4:
                return this.debug("{self} | {op_chars}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 47:
                break;

              case 5:
                return this.debug("{identifier}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 48:
                break;

              case 6:
                return this.debug("{integer}"), new lval_1.LVal(this.yytext(), lval_1.Type.INT);

              case 49:
                break;

              case 7:
                return this.debug("{whitespace} | {comment} | {c_line_comment}"), new lval_1.LVal(this.yytext(), lval_1.Type.WHITESPACE_OR_COMMENT);

              case 50:
                break;

              case 8:
                this.debug("<xc>{xc_inside}"), this.ltstr += this.yytext();

              case 51:
                break;

              case 9:
                this.debug("<xc>[\\/] | <xc>[\\*]"), this.ltstr += this.yytext();

              case 52:
                break;

              case 10:
                this.debug("<xq>{xq_inside}"), this.ltstr += this.yytext();

              case 53:
                break;

              case 11:
                return this.debug("<xq>{xq_stop}"), this.yybegin(k.YYINITIAL), new lval_1.LVal(this.ltstr, lval_1.Type.STRING);

              case 54:
                break;

              case 12:
                this.debug("<xdq>{xdq_inside}"), this.ltstr += this.yytext();

              case 55:
                break;

              case 13:
                return this.debug("<xdq>{xdq_stop}"), this.yybegin(k.YYINITIAL), this.ltstr += this.yytext(), 
                new lval_1.LVal(this.ltstr, lval_1.Type.NORMAL);

              case 56:
                break;

              case 14:
                this.debug("<xbin>{xbin_inside}"), this.ltstr += this.yytext();

              case 57:
                break;

              case 15:
                return this.debug("<xbin>{xbin_stop}"), this.yybegin(k.YYINITIAL), this.ltstr += this.yytext(), 
                new lval_1.LVal(this.ltstr, lval_1.Type.NORMAL);

              case 58:
                break;

              case 16:
                this.debug("<xhex>{xhex_inside}"), this.ltstr += this.yytext();

              case 59:
                break;

              case 17:
                return this.debug("<xhex>{xhex_stop}"), this.yybegin(k.YYINITIAL), this.ltstr += this.yytext(), 
                new lval_1.LVal(this.ltstr, lval_1.Type.NORMAL);

              case 60:
                break;

              case 18:
                this.ltstr += this.yytext();

              case 61:
                break;

              case 19:
                this.yybegin(k.xq2_2);

              case 62:
                break;

              case 20:
                this.ltstr += "]", this.ltstr += this.yytext(), this.yybegin(k.xq2);

              case 63:
                break;

              case 21:
                return this.yybegin(k.YYINITIAL), new lval_1.LVal(this.ltstr, lval_1.Type.STRING);

              case 64:
                break;

              case 22:
                this.ltstr += "]", this.yybegin(k.xq2_2);

              case 65:
                break;

              case 23:
                this.debug("{xc_start}"), this.yybegin(k.xc), this.ltstr = this.yytext();

              case 66:
                break;

              case 24:
                this.debug("{xbin_start}"), this.yybegin(k.xbin), this.ltstr = "", this.ltstr += this.yytext();

              case 67:
                break;

              case 25:
                this.debug("{xhex_start}"), this.yybegin(k.xhex), this.ltstr = "", this.ltstr += this.yytext();

              case 68:
                break;

              case 26:
                return this.debug("{decimal}"), new lval_1.LVal(this.yytext(), lval_1.Type.DECIMAL);

              case 69:
                break;

              case 27:
                return this.debug("{real}"), new lval_1.LVal(this.yytext(), lval_1.Type.DOUBLE);

              case 70:
                break;

              case 28:
                return this.debug("{assign}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 71:
                break;

              case 29:
                return this.debug("{selstar}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 72:
                break;

              case 30:
                return this.debug("{boundary}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 73:
                break;

              case 31:
                this.debug("<xc>{xc_start}"), this.ltstr += this.yytext();

              case 74:
                break;

              case 32:
                return this.debug("<xc>{xc_stop}"), this.yybegin(k.YYINITIAL), this.ltstr += this.yytext(), 
                new lval_1.LVal(this.ltstr, lval_1.Type.WHITESPACE_OR_COMMENT);

              case 75:
                break;

              case 33:
                this.debug("<xq>{xq_double}"), this.ltstr += "'";

              case 76:
                break;

              case 34:
                this.debug("<xdq>{xdq_double}"), this.ltstr += this.yytext();

              case 77:
                break;

              case 35:
                this.yybegin(k.xq2), this.ltstr = "";

              case 78:
                break;

              case 36:
                return this.debug("{integer_with_boundary}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 79:
                break;

              case 37:
                return this.debug("{hex_integer}"), new lval_1.LVal(this.yytext(), lval_1.Type.HEX_INT);

              case 80:
                break;

              case 38:
                this.debug("<xq>{xq_cat}");

              case 81:
                break;

              case 39:
                this.debug("<xbin>{xbin_cat}");

              case 82:
                break;

              case 40:
                this.debug("<xhex>{xhex_cat}");

              case 83:
                break;

              case 41:
                return this.debug("{null}"), new lval_1.LVal("null", lval_1.Type.NULL);

              case 84:
                break;

              case 42:
                return this.debug("{is_null}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 85:
                break;

              case 43:
                return this.debug("{not_null}"), new lval_1.LVal(this.yytext(), lval_1.Type.NORMAL);

              case 86:
                break;

              default:
                this.zzScanError(k.ZZ_NO_MATCH);
            }
        }
    }, k.YYEOF = -1, k.ZZ_BUFFERSIZE = 16384, k.YYINITIAL = 0, k.xc = 2, k.xq = 4, k.xdq = 6, 
    k.xsb = 8, k.xbin = 10, k.xhex = 12, k.xhint = 14, k.xq2 = 16, k.xq2_2 = 18, k.ZZ_LEXSTATE = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 4, 4, 7, 7, 8, 8 ], 
    k.ZZ_CMAP = k.zzUnpackCMap(k.ZZ_CMAP_PACKED = [ 9, 0, 1, 22, 1, 21, 1, 24, 1, 22, 1, 21, 18, 0, 1, 22, 1, 15, 1, 2, 2, 10, 2, 15, 1, 1, 2, 15, 1, 4, 1, 19, 1, 15, 1, 23, 1, 14, 1, 3, 1, 16, 9, 11, 1, 12, 1, 15, 1, 15, 1, 13, 3, 15, 1, 17, 1, 8, 1, 17, 1, 20, 1, 18, 1, 20, 2, 10, 1, 28, 2, 10, 1, 27, 1, 10, 1, 25, 1, 30, 1, 10, 1, 7, 1, 10, 1, 29, 1, 31, 1, 26, 2, 10, 1, 9, 2, 10, 1, 5, 1, 0, 1, 6, 1, 15, 1, 10, 1, 0, 1, 17, 1, 8, 1, 17, 1, 20, 1, 18, 1, 20, 2, 10, 1, 28, 2, 10, 1, 27, 1, 10, 1, 25, 1, 30, 1, 10, 1, 7, 1, 10, 1, 29, 1, 31, 1, 26, 2, 10, 1, 9, 2, 10, 1, 15, 1, 15, 2, 15, 1, 0, 5, 10, 1, 10, 122, 10, 7976, 0, 1, 24, 1, 24, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 65535, 0, 57318, 0 ]), 
    k.ZZ_ACTION_PACKED_0 = [ 9, 0, 1, 1, 1, 2, 1, 3, 2, 4, 4, 5, 1, 6, 2, 4, 1, 6, 1, 7, 1, 4, 2, 5, 1, 8, 2, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 7, 1, 23, 1, 0, 1, 24, 1, 25, 1, 26, 1, 0, 1, 27, 1, 28, 1, 29, 1, 26, 1, 30, 1, 0, 3, 5, 1, 31, 1, 32, 1, 0, 1, 33, 2, 0, 1, 34, 4, 0, 1, 35, 1, 36, 1, 27, 1, 0, 1, 37, 2, 5, 3, 0, 1, 38, 1, 39, 1, 40, 1, 41, 16, 0, 1, 42, 1, 0, 1, 43, 1, 42, 1, 43 ], 
    k.ZZ_ACTION = k.zzUnpackActionNoParams(), k.ZZ_ROWMAP_PACKED_0 = [ 0, 0, 0, 32, 0, 64, 0, 96, 0, 128, 0, 160, 0, 192, 0, 224, 0, 256, 0, 128, 0, 128, 0, 128, 0, 288, 0, 128, 0, 320, 0, 352, 0, 384, 0, 416, 0, 448, 0, 480, 0, 512, 0, 544, 0, 128, 0, 576, 0, 608, 0, 640, 0, 672, 0, 704, 0, 736, 0, 768, 0, 800, 0, 832, 0, 864, 0, 896, 0, 928, 0, 960, 0, 992, 0, 1024, 0, 128, 0, 128, 0, 128, 0, 128, 0, 1056, 0, 128, 0, 1088, 0, 128, 0, 128, 0, 1120, 0, 1152, 0, 128, 0, 128, 0, 128, 0, 1184, 0, 128, 0, 1216, 0, 1248, 0, 1280, 0, 1312, 0, 128, 0, 128, 0, 736, 0, 128, 0, 1344, 0, 1376, 0, 128, 0, 1408, 0, 928, 0, 1440, 0, 992, 0, 128, 0, 128, 0, 1472, 0, 1472, 0, 1216, 0, 1504, 0, 1536, 0, 1568, 0, 1600, 0, 1632, 0, 128, 0, 128, 0, 128, 0, 416, 0, 1664, 0, 1696, 0, 1728, 0, 1760, 0, 1792, 0, 1824, 0, 1856, 0, 1888, 0, 1920, 0, 1952, 0, 1984, 0, 2016, 0, 2048, 0, 2080, 0, 2112, 0, 2144, 0, 128, 0, 2176, 0, 128, 0, 1760, 0, 1824 ], 
    k.ZZ_ROWMAP = k.zzUnpackRowMapNoParams(), k.ZZ_TRANS_PACKED_0 = [ 1, 10, 1, 11, 1, 12, 1, 13, 3, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 14, 1, 21, 1, 14, 1, 22, 2, 18, 1, 14, 1, 18, 2, 23, 1, 24, 1, 0, 1, 25, 2, 18, 1, 26, 3, 18, 3, 27, 1, 28, 1, 29, 27, 27, 1, 30, 1, 31, 30, 30, 2, 32, 1, 33, 29, 32, 32, 0, 1, 34, 1, 35, 30, 34, 1, 36, 1, 37, 30, 36, 6, 38, 1, 39, 25, 38, 1, 40, 1, 41, 4, 40, 1, 42, 25, 40, 3, 0, 1, 43, 1, 44, 28, 0, 1, 45, 5, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 7, 18, 1, 0, 1, 46, 5, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 7, 18, 1, 0, 1, 47, 5, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 7, 18, 7, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 7, 18, 11, 0, 1, 19, 2, 0, 1, 48, 1, 0, 1, 19, 1, 0, 1, 49, 1, 0, 1, 50, 24, 0, 1, 51, 22, 0, 1, 52, 6, 0, 1, 53, 2, 0, 1, 54, 1, 0, 1, 53, 24, 0, 1, 55, 1, 0, 1, 19, 2, 0, 1, 48, 1, 0, 1, 19, 1, 0, 1, 49, 1, 0, 1, 50, 34, 0, 1, 43, 15, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 1, 18, 1, 56, 3, 18, 1, 57, 1, 18, 7, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 4, 18, 1, 58, 2, 18, 3, 27, 2, 0, 27, 27, 4, 0, 1, 59, 30, 0, 1, 60, 1, 61, 27, 0, 1, 30, 1, 0, 30, 30, 1, 0, 1, 62, 19, 0, 1, 63, 1, 64, 9, 0, 2, 32, 1, 0, 29, 32, 2, 0, 1, 65, 29, 0, 1, 34, 1, 0, 30, 34, 21, 0, 1, 66, 1, 67, 9, 0, 1, 36, 1, 0, 30, 36, 21, 0, 1, 68, 1, 69, 9, 0, 6, 38, 1, 0, 25, 38, 21, 43, 1, 0, 10, 43, 5, 0, 1, 70, 37, 0, 1, 53, 2, 0, 1, 71, 1, 0, 1, 53, 1, 0, 1, 49, 1, 0, 1, 50, 22, 0, 1, 72, 4, 0, 1, 72, 2, 0, 1, 73, 3, 0, 1, 73, 19, 0, 1, 53, 4, 0, 1, 53, 1, 0, 1, 49, 1, 0, 1, 50, 19, 0, 1, 74, 2, 0, 1, 74, 4, 0, 3, 74, 1, 0, 1, 74, 18, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 2, 18, 1, 75, 4, 18, 7, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 6, 18, 1, 76, 3, 0, 1, 77, 3, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 2, 78, 1, 79, 1, 0, 7, 18, 1, 0, 1, 80, 19, 0, 2, 63, 30, 0, 1, 63, 1, 64, 10, 0, 1, 81, 19, 0, 2, 66, 10, 0, 1, 82, 19, 0, 2, 68, 20, 0, 1, 72, 4, 0, 1, 72, 22, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 4, 0, 2, 18, 1, 83, 4, 18, 3, 0, 1, 84, 3, 0, 5, 18, 4, 0, 3, 18, 1, 0, 1, 18, 2, 85, 1, 86, 1, 0, 7, 18, 3, 0, 1, 87, 31, 0, 1, 77, 17, 0, 2, 78, 1, 79, 1, 0, 1, 88, 29, 0, 1, 87, 11, 0, 1, 89, 31, 0, 1, 84, 17, 0, 2, 85, 1, 86, 1, 0, 1, 90, 29, 0, 1, 89, 8, 0, 21, 87, 1, 78, 3, 87, 1, 91, 6, 87, 26, 0, 1, 92, 5, 0, 21, 89, 1, 85, 3, 89, 1, 93, 6, 89, 26, 0, 1, 94, 5, 0, 21, 87, 1, 78, 3, 87, 1, 91, 1, 95, 5, 87, 27, 0, 1, 96, 4, 0, 21, 89, 1, 85, 3, 89, 1, 93, 1, 97, 5, 89, 27, 0, 1, 98, 4, 0, 21, 87, 1, 78, 3, 87, 1, 91, 1, 87, 1, 99, 4, 87, 27, 0, 1, 100, 4, 0, 21, 89, 1, 85, 3, 89, 1, 93, 1, 89, 1, 101, 4, 89, 27, 0, 1, 102, 4, 0, 21, 87, 1, 78, 3, 87, 1, 91, 1, 87, 1, 103, 4, 87, 21, 89, 1, 85, 3, 89, 1, 93, 1, 89, 1, 104, 4, 89 ], 
    k.ZZ_TRANS = k.zzUnpackTransNoParams(), k.ZZ_UNKNOWN_ERROR = 0, k.ZZ_NO_MATCH = 1, 
    k.ZZ_PUSHBACK_2BIG = 2, k.ZZ_ERROR_MSG = [ "Unknown internal scanner error", "Error: could not match input", "Error: pushback value was too large" ], 
    k.ZZ_ATTRIBUTE_PACKED_0 = [ 4, 0, 1, 8, 4, 0, 3, 9, 1, 1, 1, 9, 8, 1, 1, 9, 15, 1, 4, 9, 1, 1, 1, 9, 1, 0, 2, 9, 1, 1, 1, 0, 3, 9, 1, 1, 1, 9, 1, 0, 3, 1, 2, 9, 1, 0, 1, 9, 2, 0, 1, 9, 4, 0, 2, 9, 1, 1, 1, 0, 3, 1, 3, 0, 3, 9, 1, 1, 16, 0, 1, 9, 1, 0, 1, 9, 2, 1 ], 
    k.ZZ_ATTRIBUTE = k.zzUnpackAttributeNoParams(), k;
}();

exports.Lexer = Lexer;