"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var Deque = function() {
    function t() {
        this.ddl = new DoublyLinkedList();
    }
    return t.prototype.unshift = function(t) {
        var i = new DoublyLinkedListNode(t);
        this.ddl.insertBeginning(i);
    }, t.prototype.shift = function() {
        var t = this.ddl.head;
        if (t) return this.ddl.remove(t), t.data;
    }, t.prototype.push = function(t) {
        var i = new DoublyLinkedListNode(t);
        this.ddl.insertEnd(i);
    }, t.prototype.pop = function() {
        var t = this.ddl.tail;
        if (t) return this.ddl.remove(t), t.data;
    }, t.prototype.includes = function(t) {
        return !!this.ddl.find(t);
    }, t.prototype.delete = function(t) {
        var i = this.ddl.find(t);
        return !!i && (this.ddl.remove(i), !0);
    }, Object.defineProperty(t.prototype, "length", {
        get: function() {
            return this.ddl.length;
        },
        enumerable: !0,
        configurable: !0
    }), t;
}();

exports.Deque = Deque;

var DoublyLinkedList = function() {
    function t() {
        this.head = null, this.tail = null, this.length = 0;
    }
    return t.prototype.insertBeginning = function(t) {
        this.head ? this.insertBefore(this.head, t) : (this.head = t, (this.tail = t).prev = null, 
        t.next = null, this.length++);
    }, t.prototype.insertEnd = function(t) {
        this.tail ? this.insertAfter(this.tail, t) : this.insertBeginning(t);
    }, t.prototype.insertBefore = function(t, i) {
        i.prev = t.prev, (i.next = t).prev ? t.prev.next = i : this.head = i, t.prev = i, 
        this.length++;
    }, t.prototype.insertAfter = function(t, i) {
        i.prev = t, i.next = t.next, t.next ? t.next.prev = i : this.tail = i, t.next = i, 
        this.length++;
    }, t.prototype.remove = function(t) {
        t.prev ? t.prev.next = t.next : this.head = t.next, t.next ? t.next.prev = t.prev : this.tail = t.prev, 
        t.prev = null, t.next = null, this.length--;
    }, t.prototype.find = function(t) {
        for (var i = this.head; i; i = i.next) if (i.data === t) return i;
        return null;
    }, t;
}(), DoublyLinkedListNode = function(t) {
    this.prev = null, this.next = null, this.data = t;
};