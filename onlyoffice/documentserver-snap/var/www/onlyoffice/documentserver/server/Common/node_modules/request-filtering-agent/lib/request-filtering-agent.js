"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAgent = exports.globalHttpsAgent = exports.globalHttpAgent = exports.RequestFilteringHttpsAgent = exports.RequestFilteringHttpAgent = exports.applyRequestFilter = void 0;
var net = __importStar(require("net"));
var http = __importStar(require("http"));
var https = __importStar(require("https"));
var ipaddr_js_1 = __importDefault(require("ipaddr.js"));
/**
 * validate the address that is matched the validation options
 * @param address ip address
 * @param host optional
 * @param family optional
 * @param options
 */
var validateIPAddress = function (_a, options) {
    var address = _a.address, host = _a.host, family = _a.family;
    // if it is not IP address, skip it
    if (net.isIP(address) === 0) {
        return;
    }
    try {
        var addr = ipaddr_js_1.default.parse(address);
        var range = addr.range();
        // prefer allowed list
        if (options.allowIPAddressList.length > 0 && options.allowIPAddressList.includes(address)) {
            return;
        }
        if (!options.allowMetaIPAddress) {
            // address === "0.0.0.0" || address == "::"
            if (range === "unspecified") {
                return new Error("DNS lookup " + address + "(family:" + family + ", host:" + host + ") is not allowed. Because, It is meta IP address.");
            }
        }
        // TODO: rename option name
        if (!options.allowPrivateIPAddress && range !== "unicast") {
            return new Error("DNS lookup " + address + "(family:" + family + ", host:" + host + ") is not allowed. Because, It is private IP address.");
        }
        if (options.denyIPAddressList.length > 0 && options.denyIPAddressList.includes(address)) {
            return new Error("DNS lookup " + address + "(family:" + family + ", host:" + host + ") is not allowed. Because It is defined in denyIPAddressList.");
        }
    }
    catch (error) {
        return error; // if can not parsed IP address, throw error
    }
    return;
};
// dns lookup -> check
var addDropFilterSocket = function (options, socket) {
    socket.addListener("lookup", function (err, address, family, host) {
        if (err) {
            return;
        }
        var error = validateIPAddress({ address: address, family: family, host: host }, options);
        if (error) {
            socket.destroy(error);
        }
    });
};
// public
// prevent twice apply
var appliedAgentSet = new Set();
/**
 * Apply request filter to http(s).Agent instance
 */
function applyRequestFilter(agent, options) {
    if (appliedAgentSet.has(agent)) {
        return agent;
    }
    appliedAgentSet.add(agent);
    var requestFilterOptions = {
        allowPrivateIPAddress: options && options.allowPrivateIPAddress !== undefined ? options.allowPrivateIPAddress : false,
        allowMetaIPAddress: options && options.allowMetaIPAddress !== undefined ? options.allowMetaIPAddress : false,
        allowIPAddressList: options && options.allowIPAddressList ? options.allowIPAddressList : [],
        denyIPAddressList: options && options.denyIPAddressList ? options.denyIPAddressList : []
    };
    // override http.Agent#createConnection
    // https://nodejs.org/api/http.html#http_agent_createconnection_options_callback
    // https://nodejs.org/api/net.html#net_net_createconnection_options_connectlistener
    // @ts-expect-error - @types/node does not defined createConnection
    var createConnection = agent.createConnection;
    // @ts-expect-error - @types/node does not defined createConnection
    agent.createConnection = function (options, connectionListener) {
        var socket = createConnection.call(agent, options, function () {
            // https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener
            var host = options.host;
            if (host) {
                // Direct ip address request without dns-lookup
                // Example: http://127.0.0.1
                // https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener
                var error = validateIPAddress({ address: host }, requestFilterOptions);
                if (error) {
                    socket.destroy(error);
                }
            }
            if (typeof connectionListener === "function") {
                connectionListener();
            }
        });
        // Request with domain name
        // Example: http://127.0.0.1.xip.io/
        addDropFilterSocket(requestFilterOptions, socket);
        return socket;
    };
    return agent;
}
exports.applyRequestFilter = applyRequestFilter;
/**
 * A subclass of http.Agent with request filtering
 */
var RequestFilteringHttpAgent = /** @class */ (function (_super) {
    __extends(RequestFilteringHttpAgent, _super);
    function RequestFilteringHttpAgent(options) {
        var _this = _super.call(this, options) || this;
        applyRequestFilter(_this, options);
        return _this;
    }
    return RequestFilteringHttpAgent;
}(http.Agent));
exports.RequestFilteringHttpAgent = RequestFilteringHttpAgent;
/**
 * A subclass of https.Agent with request filtering
 */
var RequestFilteringHttpsAgent = /** @class */ (function (_super) {
    __extends(RequestFilteringHttpsAgent, _super);
    function RequestFilteringHttpsAgent(options) {
        var _this = _super.call(this, options) || this;
        applyRequestFilter(_this, options);
        return _this;
    }
    return RequestFilteringHttpsAgent;
}(https.Agent));
exports.RequestFilteringHttpsAgent = RequestFilteringHttpsAgent;
exports.globalHttpAgent = new RequestFilteringHttpAgent();
exports.globalHttpsAgent = new RequestFilteringHttpsAgent();
/**
 * Get an agent for the url
 * return http or https agent
 * @param url
 */
exports.useAgent = function (url) {
    return url.startsWith("https") ? exports.globalHttpsAgent : exports.globalHttpAgent;
};
//# sourceMappingURL=request-filtering-agent.js.map