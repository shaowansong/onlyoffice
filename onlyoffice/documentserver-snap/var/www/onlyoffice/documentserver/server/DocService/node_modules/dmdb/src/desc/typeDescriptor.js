"use strict";

var __awaiter = this && this.__awaiter || function(t, c, h, u) {
    return new (h = h || Promise)(function(n, i) {
        function r(t) {
            try {
                e(u.next(t));
            } catch (t) {
                i(t);
            }
        }
        function s(t) {
            try {
                e(u.throw(t));
            } catch (t) {
                i(t);
            }
        }
        function e(t) {
            var i;
            t.done ? n(t.value) : ((i = t.value) instanceof h ? i : new h(function(t) {
                t(i);
            })).then(r, s);
        }
        e((u = u.apply(t, c || [])).next());
    });
}, __generator = this && this.__generator || function(n, r) {
    var s, e, c, h = {
        label: 0,
        sent: function() {
            if (1 & c[0]) throw c[1];
            return c[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: i(0),
        throw: i(1),
        return: i(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function i(i) {
        return function(t) {
            return function(i) {
                if (s) throw new TypeError("Generator is already executing.");
                for (;h; ) try {
                    if (s = 1, e && (c = 2 & i[0] ? e.return : i[0] ? e.throw || ((c = e.return) && c.call(e), 
                    0) : e.next) && !(c = c.call(e, i[1])).done) return c;
                    switch (e = 0, c && (i = [ 2 & i[0], c.value ]), i[0]) {
                      case 0:
                      case 1:
                        c = i;
                        break;

                      case 4:
                        return h.label++, {
                            value: i[1],
                            done: !1
                        };

                      case 5:
                        h.label++, e = i[1], i = [ 0 ];
                        continue;

                      case 7:
                        i = h.ops.pop(), h.trys.pop();
                        continue;

                      default:
                        if (!(c = 0 < (c = h.trys).length && c[c.length - 1]) && (6 === i[0] || 2 === i[0])) {
                            h = 0;
                            continue;
                        }
                        if (3 === i[0] && (!c || i[1] > c[0] && i[1] < c[3])) {
                            h.label = i[1];
                            break;
                        }
                        if (6 === i[0] && h.label < c[1]) {
                            h.label = c[1], c = i;
                            break;
                        }
                        if (c && h.label < c[2]) {
                            h.label = c[2], h.ops.push(i);
                            break;
                        }
                        c[2] && h.ops.pop(), h.trys.pop();
                        continue;
                    }
                    i = r.call(n, h);
                } catch (t) {
                    i = [ 6, t ], e = 0;
                } finally {
                    s = c = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            }([ i, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var column_1 = require("./column"), sqlName_1 = require("./sqlName"), dbtype_1 = require("../driver/dbtype"), const_1 = require("./const"), buffer_1 = require("../net/buffer"), bufferUtil_1 = require("../utils/bufferUtil"), error_1 = require("../driver/error"), TypeDescriptor = function() {
    function n(t, i) {
        this.column = new column_1.Column(), this.m_objId = -1, this.m_objVersion = -1, 
        this.m_outerId = 0, this.m_outerVer = 0, this.m_subId = 0, this.m_cltnType = 0, 
        this.m_maxCnt = 0, this.m_length = 0, this.m_size = 0, this.m_sqlName = i ? new sqlName_1.SQLName(i) : new sqlName_1.SQLName(t), 
        this.m_conn = t;
    }
    return n.prototype.parseDescByName = function() {
        return __awaiter(this, void 0, void 0, function() {
            var i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, this.m_conn.execute("BEGIN ? = SF_DESCRIBE_TYPE(?); END;", [ "", this.m_sqlName.m_fullName ]) ];

                  case 1:
                    return i = t.sent(), [ 4, i.outBinds[0].getData() ];

                  case 2:
                    return n = t.sent(), this.m_serverEncoding = this.m_conn.getServerEncoding(), this.unpack(new buffer_1.DmBuffer(n)), 
                    [ 2 ];
                }
            });
        });
    }, n.prototype.getFullName = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, this.m_sqlName.getFullName() ];
            });
        });
    }, n.prototype.getDType = function() {
        return this.column.type;
    }, n.prototype.getPrec = function() {
        return this.column.prec;
    }, n.prototype.getScale = function() {
        return this.column.scale;
    }, n.prototype.getServerEncoding = function() {
        return this.m_serverEncoding || this.m_conn.getServerEncoding();
    }, n.prototype.getObjId = function() {
        return this.m_objId;
    }, n.prototype.getStaticArrayLength = function() {
        return this.m_length;
    }, n.prototype.getStructMemSize = function() {
        return this.m_size;
    }, n.prototype.getOuterId = function() {
        return this.m_outerId;
    }, n.prototype.getCltnType = function() {
        return this.m_cltnType;
    }, n.prototype.getMaxCnt = function() {
        return this.m_maxCnt;
    }, n.getPackSize = function(t) {
        var i = 0;
        switch (t.column.type) {
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.SARRAY:
            return this.getPackArraySize(t);

          case dbtype_1.DBType.CLASS:
            return this.getPackClassSize(t);

          case dbtype_1.DBType.PLTYPE_RECORD:
            return this.getPackRecordSize(t);
        }
        return i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE;
    }, n.pack = function(t, i) {
        switch (t.column.type) {
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.SARRAY:
            return this.packArray(t, i);

          case dbtype_1.DBType.CLASS:
            return this.packClass(t, i);

          case dbtype_1.DBType.PLTYPE_RECORD:
            return this.packRecord(t, i);
        }
        i.q(t.column.type), i.q(t.column.prec), i.q(t.column.scale);
    }, n.getPackArraySize = function(t) {
        var i = 0;
        i += const_1.Const.ULINT_SIZE;
        var n = t.m_sqlName.m_name;
        return i += const_1.Const.USINT_SIZE, i += bufferUtil_1.BufferUtil.b(n, t.getServerEncoding()).length, 
        i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE, 
        i += this.getPackSize(t.m_arrObj);
    }, n.packArray = function(t, i) {
        i.q(t.column.type), i.k(t.m_sqlName.m_name, t.getServerEncoding()), i.q(t.m_objId), 
        i.q(t.m_objVersion), i.q(t.m_length), this.pack(t.m_arrObj, i);
    }, n.packRecord = function(t, i) {
        i.q(t.column.type), i.k(t.m_sqlName.m_name, t.getServerEncoding()), i.q(t.m_objId), 
        i.q(t.m_objVersion), i.m(t.m_size);
        for (var n = 0; n < t.m_size; n++) this.pack(t.m_fieldsObj[n], i);
    }, n.getPackRecordSize = function(t) {
        var i = 0;
        i += const_1.Const.ULINT_SIZE;
        var n = t.m_sqlName.m_name;
        i += const_1.Const.USINT_SIZE, i += bufferUtil_1.BufferUtil.b(n, t.getServerEncoding()).length, 
        i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE, i += const_1.Const.USINT_SIZE;
        for (var r = 0; r < t.m_size; r++) i += this.getPackSize(t.m_fieldsObj[r]);
        return i;
    }, n.getPackClassSize = function(t) {
        var i = 0;
        i += const_1.Const.ULINT_SIZE;
        var n = t.m_sqlName.m_name;
        return i += const_1.Const.USINT_SIZE, i += bufferUtil_1.BufferUtil.b(n, t.getServerEncoding()).length, 
        i += const_1.Const.ULINT_SIZE, i += const_1.Const.ULINT_SIZE, 4 == t.m_objId && (i += const_1.Const.ULINT_SIZE, 
        i += const_1.Const.ULINT_SIZE, i += const_1.Const.USINT_SIZE), i;
    }, n.packClass = function(t, i) {
        i.q(t.column.type), i.k(t.m_sqlName.m_name, t.getServerEncoding()), i.q(t.m_objId), 
        i.q(t.m_objVersion), 4 == t.m_objId && (i.q(t.m_outerId), i.q(t.m_outerVer), i.q(t.m_subId));
    }, n.prototype.unpack = function(t) {
        switch (this.column.type = t.N(), this.column.type) {
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.SARRAY:
            return void this.unpackArray(t);

          case dbtype_1.DBType.CLASS:
            return void this.unpackClass(t);

          case dbtype_1.DBType.PLTYPE_RECORD:
            return void this.unpackRecord(t);
        }
        this.column.prec = t.N(), this.column.scale = t.N();
    }, n.prototype.unpackArray = function(t) {
        this.m_sqlName.m_name = t.g(this.getServerEncoding()), this.m_sqlName.m_schId = t.N(), 
        this.m_sqlName.m_pkgId = t.N(), this.m_objId = t.N(), this.m_objVersion = t.N(), 
        this.m_length = t.N(), this.column.type == dbtype_1.DBType.ARRAY && (this.m_length = 0), 
        this.m_arrObj = new n(this.m_conn), this.m_arrObj.unpack(t);
    }, n.prototype.unpackRecord = function(t) {
        this.m_sqlName.m_name = t.g(this.getServerEncoding()), this.m_sqlName.m_schId = t.N(), 
        this.m_sqlName.m_pkgId = t.N(), this.m_objId = t.N(), this.m_objVersion = t.N(), 
        this.m_size = t.x(), this.m_fieldsObj = new Array(this.m_size);
        for (var i = 0; i < this.m_size; i++) this.m_fieldsObj[i] = new n(this.m_conn), 
        this.m_fieldsObj[i].unpack(t);
    }, n.prototype.unpackClnt_nestTab = function(t) {
        this.m_maxCnt = t.N(), this.m_arrObj = new n(this.m_conn), this.m_arrObj.unpack(t);
    }, n.prototype.unpackClnt = function(t) {
        switch (this.m_outerId = t.N(), this.m_outerVer = t.N(), this.m_subId = t.x(), this.m_cltnType = t.x(), 
        this.m_cltnType) {
          case n.CLTN_TYPE_IND_TABLE:
            throw error_1.DBError.ECJS_UNSUPPORTED_TYPE();

          case n.CLTN_TYPE_NST_TABLE:
          case n.CLTN_TYPE_VARRAY:
            this.unpackClnt_nestTab(t);
        }
    }, n.prototype.unpackClass = function(t) {
        if (this.m_sqlName.m_name = t.g(this.getServerEncoding()), this.m_sqlName.m_schId = t.N(), 
        this.m_sqlName.m_pkgId = t.N(), this.m_objId = t.N(), this.m_objVersion = t.N(), 
        4 == this.m_objId) this.unpackClnt(t); else {
            this.m_size = t.x(), this.m_fieldsObj = new Array(this.m_size);
            for (var i = 0; i < this.m_size; i++) this.m_fieldsObj[i] = new n(this.m_conn), 
            this.m_fieldsObj[i].unpack(t);
        }
    }, n.prototype.calcChkDescLen_array = function(t) {
        var i = 0;
        return i += const_1.Const.USINT_SIZE, i += const_1.Const.ULINT_SIZE, i += this.calcChkDescLen(t);
    }, n.prototype.calcChkDescLen_record = function(t) {
        var i = 0;
        i += const_1.Const.USINT_SIZE, i += const_1.Const.USINT_SIZE;
        for (var n = 0; n < t.m_size; n++) i += this.calcChkDescLen(t.m_fieldsObj[n]);
        return i;
    }, n.prototype.calcChkDescLen_class_normal = function(t) {
        var i = 0;
        i += const_1.Const.USINT_SIZE;
        for (var n = 0; n < t.m_size; n++) i += this.calcChkDescLen(t.m_fieldsObj[n]);
        return i;
    }, n.prototype.calcChkDescLen_class_cnlt = function(t) {
        var i = 0;
        switch (i += const_1.Const.USINT_SIZE, i += const_1.Const.ULINT_SIZE, t.getCltnType()) {
          case n.CLTN_TYPE_IND_TABLE:
            throw error_1.DBError.ECJS_UNSUPPORTED_TYPE();

          case n.CLTN_TYPE_VARRAY:
          case n.CLTN_TYPE_NST_TABLE:
            i += this.calcChkDescLen(t.m_arrObj);
        }
        return i;
    }, n.prototype.calcChkDescLen_class = function(t) {
        var i = 0;
        return i += const_1.Const.USINT_SIZE, i += const_1.Const.BYTE_SIZE, 4 == t.m_objId ? i += this.calcChkDescLen_class_cnlt(t) : i += this.calcChkDescLen_class_normal(t), 
        i;
    }, n.prototype.calcChkDescLen_buildin = function() {
        var t = 0;
        return t += const_1.Const.USINT_SIZE, t += const_1.Const.USINT_SIZE, t += const_1.Const.USINT_SIZE;
    }, n.prototype.calcChkDescLen = function(t) {
        var i = 0;
        switch (t.getDType()) {
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.SARRAY:
            i = this.calcChkDescLen_array(t);
            break;

          case dbtype_1.DBType.PLTYPE_RECORD:
            i = this.calcChkDescLen_record(t);
            break;

          case dbtype_1.DBType.CLASS:
            i = this.calcChkDescLen_class(t);
            break;

          default:
            i = this.calcChkDescLen_buildin();
        }
        return i;
    }, n.prototype.makeChkDesc_array = function(t, i) {
        return bufferUtil_1.BufferUtil.y(this.m_descBuf, t, dbtype_1.DBType.ARRAY), t += const_1.Const.USINT_SIZE, 
        bufferUtil_1.BufferUtil.v(this.m_descBuf, t, i.m_length), t += const_1.Const.ULINT_SIZE, 
        t = this.makeChkDesc(t, i);
    }, n.prototype.makeChkDesc_record = function(t, i) {
        bufferUtil_1.BufferUtil.y(this.m_descBuf, t, dbtype_1.DBType.PLTYPE_RECORD), t += const_1.Const.USINT_SIZE, 
        bufferUtil_1.BufferUtil.y(this.m_descBuf, t, i.m_size), t += const_1.Const.USINT_SIZE;
        for (var n = 0; n < i.m_size; n++) t = this.makeChkDesc(t, i.m_fieldsObj[n]);
        return t;
    }, n.prototype.makeChkDesc_buildin = function(t, i) {
        var n = i.getDType(), r = 0, s = 0;
        return n != dbtype_1.DBType.BLOB && (r = i.getPrec(), s = i.getScale()), bufferUtil_1.BufferUtil.y(this.m_descBuf, t, n), 
        t += const_1.Const.USINT_SIZE, bufferUtil_1.BufferUtil.y(this.m_descBuf, t, r), 
        t += const_1.Const.USINT_SIZE, bufferUtil_1.BufferUtil.y(this.m_descBuf, t, s), 
        t += const_1.Const.USINT_SIZE;
    }, n.prototype.makeChkDesc_class_normal = function(t, i) {
        bufferUtil_1.BufferUtil.y(this.m_descBuf, t, i.m_size), t += const_1.Const.USINT_SIZE;
        for (var n = 0; n < i.m_size; n++) t = this.makeChkDesc(t, i.m_fieldsObj[n]);
        return t;
    }, n.prototype.makeChkDesc_class_clnt = function(t, i) {
        switch (bufferUtil_1.BufferUtil.y(this.m_descBuf, t, i.m_cltnType), t += const_1.Const.USINT_SIZE, 
        bufferUtil_1.BufferUtil.v(this.m_descBuf, t, i.getMaxCnt()), t += const_1.Const.ULINT_SIZE, 
        i.m_cltnType) {
          case n.CLTN_TYPE_IND_TABLE:
            throw error_1.DBError.ECJS_UNSUPPORTED_TYPE();

          case n.CLTN_TYPE_NST_TABLE:
          case n.CLTN_TYPE_VARRAY:
            t = this.makeChkDesc(t, i.m_arrObj);
        }
        return t;
    }, n.prototype.makeChkDesc_class = function(t, i) {
        bufferUtil_1.BufferUtil.y(this.m_descBuf, t, dbtype_1.DBType.CLASS), t += const_1.Const.USINT_SIZE;
        var n = !1;
        return 4 == i.m_objId && (n = !0), n ? bufferUtil_1.BufferUtil.l(this.m_descBuf, t, 1) : bufferUtil_1.BufferUtil.l(this.m_descBuf, t, 0), 
        t += const_1.Const.BYTE_SIZE, t = n ? this.makeChkDesc_class_clnt(t, i) : this.makeChkDesc_class_normal(t, i);
    }, n.prototype.makeChkDesc = function(t, i) {
        switch (i.getDType()) {
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.SARRAY:
            t = this.makeChkDesc_array(t, i);
            break;

          case dbtype_1.DBType.PLTYPE_RECORD:
            t = this.makeChkDesc_record(t, i);
            break;

          case dbtype_1.DBType.CLASS:
            t = this.makeChkDesc_class(t, i);
            break;

          default:
            t = this.makeChkDesc_buildin(t, i);
        }
        return t;
    }, n.prototype.getClassDescChkInfo = function() {
        if (null != this.m_descBuf) return this.m_descBuf;
        var t = this.calcChkDescLen(this);
        return this.m_descBuf = Buffer.alloc(t), this.makeChkDesc(0, this), this.m_descBuf;
    }, n.OBJ_BLOB_MAGIC = 78111999, n.CLTN_TYPE_VARRAY = 1, n.CLTN_TYPE_NST_TABLE = 2, 
    n.CLTN_TYPE_IND_TABLE = 3, n;
}();

exports.TypeDescriptor = TypeDescriptor;