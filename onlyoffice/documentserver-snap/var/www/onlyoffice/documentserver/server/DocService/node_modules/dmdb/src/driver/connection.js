"use strict";

var __extends = this && this.__extends || function() {
    var r = function(t, i) {
        return (r = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(t, i) {
            t.__proto__ = i;
        } || function(t, i) {
            for (var n in i) i.hasOwnProperty(n) && (t[n] = i[n]);
        })(t, i);
    };
    return function(t, i) {
        function n() {
            this.constructor = t;
        }
        r(t, i), t.prototype = null === i ? Object.create(i) : (n.prototype = i.prototype, 
        new n());
    };
}(), __awaiter = this && this.__awaiter || function(t, o, c, u) {
    return new (c = c || Promise)(function(n, i) {
        function r(t) {
            try {
                s(u.next(t));
            } catch (t) {
                i(t);
            }
        }
        function e(t) {
            try {
                s(u.throw(t));
            } catch (t) {
                i(t);
            }
        }
        function s(t) {
            var i;
            t.done ? n(t.value) : ((i = t.value) instanceof c ? i : new c(function(t) {
                t(i);
            })).then(r, e);
        }
        s((u = u.apply(t, o || [])).next());
    });
}, __generator = this && this.__generator || function(n, r) {
    var e, s, o, c = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: i(0),
        throw: i(1),
        return: i(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function i(i) {
        return function(t) {
            return function(i) {
                if (e) throw new TypeError("Generator is already executing.");
                for (;c; ) try {
                    if (e = 1, s && (o = 2 & i[0] ? s.return : i[0] ? s.throw || ((o = s.return) && o.call(s), 
                    0) : s.next) && !(o = o.call(s, i[1])).done) return o;
                    switch (s = 0, o && (i = [ 2 & i[0], o.value ]), i[0]) {
                      case 0:
                      case 1:
                        o = i;
                        break;

                      case 4:
                        return c.label++, {
                            value: i[1],
                            done: !1
                        };

                      case 5:
                        c.label++, s = i[1], i = [ 0 ];
                        continue;

                      case 7:
                        i = c.ops.pop(), c.trys.pop();
                        continue;

                      default:
                        if (!(o = 0 < (o = c.trys).length && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {
                            c = 0;
                            continue;
                        }
                        if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                            c.label = i[1];
                            break;
                        }
                        if (6 === i[0] && c.label < o[1]) {
                            c.label = o[1], o = i;
                            break;
                        }
                        if (o && c.label < o[2]) {
                            c.label = o[2], c.ops.push(i);
                            break;
                        }
                        o[2] && c.ops.pop(), c.trys.pop();
                        continue;
                    }
                    i = r.call(n, c);
                } catch (t) {
                    i = [ 6, t ], s = 0;
                } finally {
                    e = o = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            }([ i, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var path_1 = require("path"), access_1 = require("../net/access"), error_1 = require("./error"), const_1 = require("../desc/const"), driverUtil_1 = require("../utils/driverUtil"), stringUtil_1 = require("../utils/stringUtil"), dm_1 = require("../dm"), lob_1 = require("./lob"), events_1 = require("events"), net_1 = require("net"), statement_1 = require("./statement"), tls_1 = require("tls"), fs_1 = require("fs"), os_1 = require("os"), svcConf_1 = require("../desc/svcConf"), middleware_1 = require("../middleware/middleware"), cacheQueue_1 = require("../utils/cacheQueue"), timer_1 = require("../utils/timer"), msg_1 = require("../net/msg/msg"), Connection = function(i) {
    function n(t) {
        var n = i.call(this) || this;
        return n.serverEncoding = const_1.Const.ENCODING_GB18030, n.dbTimezone = 0, n.sslEncrypt = 0, 
        n.malini2 = !0, n.execute2 = !0, n.lobEmptyCompOrcl = !1, n.isoLevel = -1, n.newLobFlag = !0, 
        n.constParaOpt = !1, n.standbyCount = 0, n.sessionID = BigInt(-1), n.trxStatus = const_1.Const.TRX_STATUS_NOT_START, 
        n.trxFinish = !0, n.dscControl = !1, n.newClientType = !1, n.msgVersion = msg_1.Msg.VERSION, 
        n.conn_prop_locale = 0, n.conn_prop_compress = const_1.Const.MSG_COMPRESS_NO, n.conn_prop_compressID = const_1.Const.MSG_CPR_FUN_ID_ZIP, 
        n.conn_prop_loginEncrypt = !0, n.conn_prop_isBdtaRS = !1, n.conn_prop_loginCertificate = "", 
        n.conn_prop_sessEncode = "", n.conn_prop_uKeyName = "", n.conn_prop_uKeyPin = "", 
        n.conn_prop_columnNameCase = const_1.Const.COLUMN_NAME_NATURAL_CASE, n.conn_prop_localTimezone = -new Date().getTimezoneOffset(), 
        n.conn_prop_socketTimeout = 0, n.conn_prop_connectTimeout = 5e3, n.conn_prop_sessionTimeout = 0, 
        n.conn_prop_mppLocal = !1, n.conn_prop_rwSeparate = !1, n.conn_prop_rwPercent = 25, 
        n.conn_prop_rwHA = !1, n.conn_prop_rwStandbyRecoverTime = 1e3, n.conn_prop_rwIgnoreSql = !1, 
        n.conn_prop_doSwitch = const_1.Const.DO_SWITCH_OFF, n.conn_prop_cluster = const_1.Const.CLUSTER_TYPE_NORMAL, 
        n.conn_prop_cipherPath = "", n.conn_prop_keyWords = new Array(), n.conn_prop_osAuthType = const_1.Const.OSAUTH_DEFAULT, 
        n.conn_prop_url = "", n.conn_prop_host = "localhost", n.conn_prop_port = const_1.Const.PORT_DEFAULT, 
        n.conn_prop_user = "SYSDBA", n.conn_prop_pwd = "SYSDBA", n.conn_prop_appName = "", 
        n.conn_prop_osName = os_1.type(), n.conn_prop_caseSensitive = !0, n.conn_prop_bufPrefetch = 0, 
        n.conn_prop_escapeProcess = !1, n.conn_prop_maxRows = 0, n.conn_prop_autoCommit = !0, 
        n.conn_prop_enRsCache = !1, n.conn_prop_epSelector = 0, n.conn_prop_rsCacheSize = 20, 
        n.conn_prop_rsRefreshFreq = 10, n.conn_prop_loginMode = const_1.Const.LOGIN_MODE_NORMAL_FIRST, 
        n.conn_prop_loginStatus = 0, n.conn_prop_loginDscCtrl = !1, n.conn_prop_switchTimes = 1, 
        n.conn_prop_switchInterval = 1e3, n.conn_prop_continueBatchOnError = !1, n.conn_prop_batchAllowMaxErrors = 0, 
        n.conn_prop_batchType = 1, n.conn_prop_batchNotOnCall = !1, n.conn_prop_compatibleMode = 0, 
        n.conn_prop_lobMode = 1, n.conn_prop_stmtPoolSize = 15, n.conn_prop_alwaysAllowCommit = !0, 
        n.conn_prop_sslPath = "", n.conn_prop_logLevel = const_1.Const.LOG_OFF, n.conn_prop_logDir = process.cwd(), 
        n.conn_prop_logFlushFreq = 30, n.closed = !0, n.readOnly = !1, n.local = !1, n.rwStandby = !1, 
        n.props = t, n.setAttributes(t), 0 < n.conn_prop_stmtPoolSize && (n.stmtPool = new cacheQueue_1.CacheQueue(n.conn_prop_stmtPoolSize, !1), 
        n.stmtPool.beforeRemove = function(i) {
            return __awaiter(n, void 0, void 0, function() {
                return __generator(this, function(t) {
                    switch (t.label) {
                      case 0:
                        return t.trys.push([ 0, 2, , 3 ]), [ 4, this.access.A(i.handle) ];

                      case 1:
                        return t.sent(), [ 3, 3 ];

                      case 2:
                        return t.sent(), [ 3, 3 ];

                      case 3:
                        return [ 2 ];
                    }
                });
            });
        }), n;
    }
    return __extends(n, i), n.newInstanceOfConnection = function(t) {
        var i = new n(t);
        return i.newMiddlewares(), i;
    }, n.prototype.newMiddlewares = function() {
        this.middlewares = new middleware_1.Middlewares(this, this.props, n.nextID++, null);
    }, n.prototype.setAttributes = function(t) {
        var i, n;
        0 !== t.size() && (this.conn_prop_url = t.getTrimString("url", this.conn_prop_url), 
        this.conn_prop_host = t.getTrimString("host", this.conn_prop_host), this.conn_prop_port = t.getNumber("port", this.conn_prop_port), 
        this.conn_prop_user = t.getTrimString("user", this.conn_prop_user), this.conn_prop_pwd = t.getTrimString("password", this.conn_prop_pwd), 
        this.rwStandby = t.getBoolean("rwStandby", this.rwStandby), this.conn_prop_compress = t.getBoolean("isCompress", !1) ? const_1.Const.MSG_COMPRESS_AUTO : this.conn_prop_compress, 
        this.conn_prop_compress = t.getNumber("compress", this.conn_prop_compress, 0, 2), 
        this.conn_prop_compressID = t.getNumber("compressID", this.conn_prop_compressID, 0, 1), 
        this.parseLanguage(t), (i = t.getTrimString("sessEncode", this.conn_prop_sessEncode)) && !driverUtil_1.DriverUtil.isSupportedCharset(i) ? this.conn_prop_sessEncode = "" : this.conn_prop_sessEncode = i, 
        this.conn_prop_enRsCache = t.getBoolean("enRsCache", this.conn_prop_enRsCache), 
        this.conn_prop_epSelector = t.getNumber("epSelector", this.conn_prop_epSelector, 0, 1), 
        this.conn_prop_localTimezone = t.getNumber("localTimezone", this.conn_prop_localTimezone, -720, 720), 
        this.conn_prop_rsCacheSize = t.getNumber("rsCacheSize", this.conn_prop_rsCacheSize, 0), 
        this.conn_prop_rsRefreshFreq = t.getNumber("rsRefreshFreq", this.conn_prop_rsRefreshFreq, 0), 
        this.conn_prop_loginMode = t.getNumber("loginMode", this.conn_prop_loginMode, 0, 4), 
        this.conn_prop_loginStatus = t.getNumber("loginStatus", this.conn_prop_loginStatus, 0), 
        [ 0, 3, 4, 5 ].includes(this.conn_prop_loginStatus) || (this.conn_prop_loginStatus = 0), 
        this.conn_prop_loginDscCtrl = t.getBoolean("loginDscCtrl", this.conn_prop_loginDscCtrl), 
        this.conn_prop_switchTimes = t.getNumber("switchTimes", this.conn_prop_switchTimes, 0), 
        this.conn_prop_switchInterval = t.getNumber("switchInterval", this.conn_prop_switchInterval, 0), 
        this.conn_prop_loginEncrypt = t.getBoolean("loginEncrypt", this.conn_prop_loginEncrypt), 
        this.conn_prop_loginCertificate = t.getTrimString("loginCertificate", this.conn_prop_loginCertificate), 
        this.conn_prop_rwSeparate = t.getBoolean("rwSeparate", this.conn_prop_rwSeparate), 
        this.conn_prop_rwPercent = t.getNumber("rwPercent", this.conn_prop_rwPercent, 0, 100), 
        this.conn_prop_rwHA = t.getBoolean("rwHA", this.conn_prop_rwHA), this.conn_prop_rwStandbyRecoverTime = t.getNumber("rwStandbyRecoverTime", this.conn_prop_rwStandbyRecoverTime, 0), 
        this.conn_prop_rwIgnoreSql = t.getBoolean("rwIgnoreSql", this.conn_prop_rwIgnoreSql), 
        this.conn_prop_doSwitch = t.getNumber("doSwitch", this.conn_prop_doSwitch, 0, 2), 
        this.conn_prop_cluster = this.parseCluster(t), this.conn_prop_cipherPath = t.getTrimString("cipherPath", this.conn_prop_cipherPath), 
        t.getBoolean("comOra", !1) && (this.conn_prop_compatibleMode = const_1.Const.COMPATIBLE_MODE_ORACLE), 
        this.conn_prop_compatibleMode = svcConf_1.SvcConf.parseCompatibleMode(t), this.conn_prop_keyWords = t.getStringArray("keyWords", this.conn_prop_keyWords), 
        this.conn_prop_appName = t.getTrimString("appName", this.conn_prop_appName), this.conn_prop_osName = t.getTrimString("osName", this.conn_prop_osName), 
        this.conn_prop_mppLocal = t.getBoolean("mppLocal", this.conn_prop_mppLocal), this.conn_prop_socketTimeout = t.getNumber("socketTimeout", this.conn_prop_socketTimeout, 0), 
        this.conn_prop_connectTimeout = t.getNumber("connectTimeout", this.conn_prop_connectTimeout, 0), 
        this.conn_prop_sessionTimeout = t.getNumber("sessionTimeout", this.conn_prop_sessionTimeout, 0), 
        this.parseOsAuthType(t), this.conn_prop_continueBatchOnError = t.getBoolean("continueBatchOnError", this.conn_prop_continueBatchOnError), 
        this.conn_prop_batchAllowMaxErrors = t.getNumber("batchAllowMaxErrors", this.conn_prop_batchAllowMaxErrors, 0), 
        this.conn_prop_escapeProcess = t.getBoolean("escapeProcess", this.conn_prop_escapeProcess), 
        this.conn_prop_autoCommit = t.getBoolean("autoCommit", dm_1.dmdb.autoCommit), this.conn_prop_maxRows = t.getNumber("maxRows", this.conn_prop_maxRows, 0), 
        this.conn_prop_bufPrefetch = t.getNumber("bufPrefetch", this.conn_prop_bufPrefetch, const_1.Const.MIN_BUF_PREFETCH, const_1.Const.MAX_BUF_PREFETCH), 
        this.conn_prop_lobMode = t.getNumber("LobMode", this.conn_prop_lobMode, 1, 2), this.conn_prop_stmtPoolSize = t.getNumber("StmtPoolSize", this.conn_prop_stmtPoolSize, 0), 
        this.conn_prop_alwaysAllowCommit = t.getBoolean("alwaysAllowCommit", this.conn_prop_alwaysAllowCommit), 
        this.conn_prop_batchType = t.getNumber("batchType", this.conn_prop_batchType, 1, 2), 
        this.conn_prop_batchNotOnCall = t.getBoolean("batchNotOnCall", this.conn_prop_batchNotOnCall), 
        this.conn_prop_isBdtaRS = t.getBoolean("isBdtaRS", this.conn_prop_isBdtaRS), this.conn_prop_sslPath = t.getTrimString("sslPath", this.conn_prop_sslPath), 
        this.conn_prop_uKeyName = t.getTrimString("uKeyName", this.conn_prop_uKeyName), 
        this.conn_prop_uKeyPin = t.getTrimString("uKeyPin", this.conn_prop_uKeyPin), t.getBoolean("columnNameUpperCase", !1) && (this.conn_prop_columnNameCase = const_1.Const.COLUMN_NAME_UPPER_CASE), 
        "upper" === (n = t.getTrimString("columnNameCase", "")).toLowerCase() ? this.conn_prop_columnNameCase = const_1.Const.COLUMN_NAME_UPPER_CASE : "lower" === n.toLowerCase() && (this.conn_prop_columnNameCase = const_1.Const.COLUMN_NAME_LOWER_CASE), 
        this.epGroup = t.getAny("epGroup"), this.conn_prop_logLevel = svcConf_1.SvcConf.parseLogLevel(t), 
        this.conn_prop_logDir = driverUtil_1.DriverUtil.formatDir(t.getTrimString("logDir", this.conn_prop_logDir)), 
        this.conn_prop_logFlushFreq = t.getNumber("logFlushFreq", this.conn_prop_logFlushFreq, 0));
    }, n.prototype.parseOsAuthType = function(t) {
        var i = t.getTrimString("osAuthType", "");
        if (i && !stringUtil_1.StringUtil.isDigit(i) ? stringUtil_1.StringUtil.equalsIgnoreCase(i, "ON") ? this.conn_prop_osAuthType = const_1.Const.OSAUTH_DEFAULT : stringUtil_1.StringUtil.equalsIgnoreCase(i, "SYSDBA") ? this.conn_prop_osAuthType = const_1.Const.OSAUTH_DBA : stringUtil_1.StringUtil.equalsIgnoreCase(i, "SYSAUDITOR") ? this.conn_prop_osAuthType = const_1.Const.OSAUTH_AUDITOR : stringUtil_1.StringUtil.equalsIgnoreCase(i, "SYSSSO") ? this.conn_prop_osAuthType = const_1.Const.OSAUTH_SSO : stringUtil_1.StringUtil.equalsIgnoreCase(i, "AUTO") ? this.conn_prop_osAuthType = const_1.Const.OSAUTH_AUTOMATCH : stringUtil_1.StringUtil.equalsIgnoreCase(i, "OFF") && (this.conn_prop_osAuthType = const_1.Const.OSAUTH_OFF) : this.conn_prop_osAuthType = t.getNumber("osAuthType", this.conn_prop_osAuthType, 0, 4), 
        this.conn_prop_user || this.conn_prop_osAuthType !== const_1.Const.OSAUTH_OFF) {
            if (this.conn_prop_osAuthType !== const_1.Const.OSAUTH_OFF && this.conn_prop_user) throw error_1.DBError.ECJS_OSAUTH_ERROR();
            this.conn_prop_osAuthType !== const_1.Const.OSAUTH_OFF && (this.conn_prop_user = process.env["user.name"] || "", 
            this.conn_prop_pwd = "");
        } else this.conn_prop_user = "SYSDBA";
    }, n.prototype.parseLanguage = function(t) {
        var i = t.getTrimString("language", "cn");
        stringUtil_1.StringUtil.equalsIgnoreCase(i, "cn") ? this.conn_prop_locale = const_1.Const.LANGUAGE_CN : stringUtil_1.StringUtil.equalsIgnoreCase(i, "en") && (this.conn_prop_locale = const_1.Const.LANGUAGE_EN), 
        svcConf_1.SvcConf.LOCALE = this.conn_prop_locale, this.oracleDateLanguage = this.conn_prop_locale;
    }, n.prototype.parseCluster = function(t) {
        var i = t.getTrimString("cluster", "");
        return stringUtil_1.StringUtil.equalsIgnoreCase(i, "dsc") ? const_1.Const.CLUSTER_TYPE_DSC : stringUtil_1.StringUtil.equalsIgnoreCase(i, "rw") ? const_1.Const.CLUSTER_TYPE_RW : stringUtil_1.StringUtil.equalsIgnoreCase(i, "dw") ? const_1.Const.CLUSTER_TYPE_DW : stringUtil_1.StringUtil.equalsIgnoreCase(i, "mpp") ? const_1.Const.CLUSTER_TYPE_MPP : const_1.Const.CLUSTER_TYPE_NORMAL;
    }, n.prototype.setTrxFinish = function(t) {
        switch (t & const_1.Const.TRX_STATUS_STATE_MASK) {
          case const_1.Const.TRX_STATUS_NOT_START:
          case const_1.Const.TRX_STATUS_COMMITTED:
          case const_1.Const.TRX_STATUS_ROLLBACKED:
            this.trxFinish = !0;
            break;

          default:
            this.trxFinish = !1;
        }
    }, n.node2dbIsoLevel = function(t) {
        switch (t) {
          case const_1.Const.CLI_READ_UNCOMMITTED:
            return const_1.Const.ISO_LEVEL_READ_UNCOMMITTED;

          case const_1.Const.CLI_READ_COMMITTED:
            return const_1.Const.ISO_LEVEL_READ_COMMITTED;

          case const_1.Const.CLI_REPEATABLE_READ:
            return const_1.Const.ISO_LEVEL_REPEATABLE_READ;

          case const_1.Const.CLI_SERIALIZABLE:
            return const_1.Const.ISO_LEVEL_SERIALIZABLE;

          default:
            return -1;
        }
    }, n.db2nodeIsoLevel = function(t) {
        switch (t) {
          case const_1.Const.ISO_LEVEL_READ_UNCOMMITTED:
            return const_1.Const.CLI_READ_UNCOMMITTED;

          case const_1.Const.ISO_LEVEL_READ_COMMITTED:
            return const_1.Const.CLI_READ_COMMITTED;

          case const_1.Const.ISO_LEVEL_REPEATABLE_READ:
            return const_1.Const.CLI_REPEATABLE_READ;

          case const_1.Const.ISO_LEVEL_SERIALIZABLE:
            return const_1.Const.CLI_SERIALIZABLE;

          default:
            return -1;
        }
    }, n.prototype.compatibleOracle = function() {
        return this.conn_prop_compatibleMode === const_1.Const.COMPATIBLE_MODE_ORACLE;
    }, n.prototype.checkClosed = function() {
        if (this.closed) throw error_1.DBError.ECJS_CONNECTION_CLOSED();
    }, n.prototype.getIndexOnEPGroup = function() {
        if (!this.epGroup || !this.epGroup.epList) return -1;
        for (var t = 0; t < this.epGroup.epList.length; t++) {
            var i = this.epGroup.epList[t];
            if (i.host === this.conn_prop_host && i.port === this.conn_prop_port) return t;
        }
        return -1;
    }, n.prototype.openConnection = function(i) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, this.middlewares.valid ? this.middlewares.reset().connection_openConnection(this, i) : this.do_openConnection(i) ];
            });
        });
    }, n.prototype.execute = function(t, i, n, r) {
        if (void 0 === i && void 0 === n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_execute(this, t) : this.do_execute(t);
        if ("function" == typeof i && void 0 === n && void 0 === r) this.execute(t).then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, void 0);
        }); else {
            if ("function" != typeof i && void 0 === n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_execute(this, t, i) : this.do_execute(t, i);
            if ("function" != typeof i && "function" == typeof n && void 0 === r) this.execute(t, i).then(function(t) {
                n(null, t);
            }).catch(function(t) {
                n(t, void 0);
            }); else {
                if ("function" != typeof i && "function" != typeof n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_execute(this, t, i, n) : this.do_execute(t, i, n);
                if ("function" == typeof i || "function" == typeof n || "function" != typeof r) throw error_1.DBError.ECJS_INVALID_PARAM();
                this.execute(t, i, n).then(function(t) {
                    r(null, t);
                }).catch(function(t) {
                    r(t, void 0);
                });
            }
        }
    }, n.prototype.executeMany = function(t, i, n, r) {
        if ("number" == typeof i && void 0 === n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_executeMany(this, t, i) : this.do_executeMany(t, i);
        if ("number" == typeof i && "function" == typeof n && void 0 === r) this.executeMany(t, i).then(function(t) {
            n(null, t);
        }).catch(function(t) {
            n(t, void 0);
        }); else {
            if ("number" == typeof i && "function" != typeof n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_executeMany(this, t, i, n) : this.do_executeMany(t, i, n);
            if ("number" == typeof i && "function" != typeof n && "function" == typeof r) this.executeMany(t, i, n).then(function(t) {
                r(null, t);
            }).catch(function(t) {
                r(t, void 0);
            }); else {
                if (Array.isArray(i) && void 0 === n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_executeMany(this, t, i) : this.do_executeMany(t, i);
                if (Array.isArray(i) && "function" == typeof n && void 0 === r) this.executeMany(t, i).then(function(t) {
                    n(null, t);
                }).catch(function(t) {
                    n(t, void 0);
                }); else {
                    if (Array.isArray(i) && "function" != typeof n && void 0 === r) return this.middlewares.valid ? this.middlewares.reset().connection_executeMany(this, t, i, n) : this.do_executeMany(t, i, n);
                    if (!Array.isArray(i) || "function" == typeof n || "function" != typeof r) throw error_1.DBError.ECJS_INVALID_PARAM();
                    this.executeMany(t, i, n).then(function(t) {
                        r(null, t);
                    }).catch(function(t) {
                        r(t, void 0);
                    });
                }
            }
        }
    }, n.prototype.createLob = function(t, i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().connection_createLob(this, t) : this.do_createLob(t);
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.createLob(t).then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, void 0);
        });
    }, n.prototype.close = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().connection_close(this) : this.do_close();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.close().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
    }, n.prototype.commit = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().connection_commit(this) : this.do_commit();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.commit().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
    }, n.prototype.getStatementInfo = function(t, i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().connection_getStatementInfo(this, t) : this.do_getStatementInfo(t);
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.getStatementInfo(t).then(function(t) {
            i(null, t);
        }).catch(function(t) {
            i(t, void 0);
        });
    }, n.prototype.ping = function(i) {
        if (void 0 === i) return this.execute("select 1").then(function() {});
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.ping().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
    }, n.prototype.release = function(i) {
        if (void 0 === i) return this.close();
        if ("function" != typeof i) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.release().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
    }, n.prototype.rollback = function(i) {
        if (void 0 === i) return this.middlewares.valid ? this.middlewares.reset().connection_rollback(this) : this.do_rollback();
        if ("function" == typeof i) return this.rollback().then(function() {
            i(null);
        }).catch(function(t) {
            i(t);
        });
        throw error_1.DBError.ECJS_INVALID_PARAM();
    }, n.prototype.changePassword = function(t, i, n, r) {
        if (void 0 === r) {
            if ("string" != typeof t || "string" != typeof i || "string" != typeof n) throw error_1.DBError.ECJS_INVALID_PARAM();
            return this.execute('alter user "' + t + '" identified by "' + n + '"').then(function() {});
        }
        if ("function" != typeof r) throw error_1.DBError.ECJS_INVALID_PARAM();
        this.changePassword(t, i, n).then(function() {
            r(null);
        }).catch(function(t) {
            r(t);
        });
    }, n.prototype.free = function() {
        return __awaiter(this, void 0, void 0, function() {
            var i, n = this;
            return __generator(this, function(t) {
                return this.stmtPool && this.stmtPool.clear(), (i = this.middlewares.log) && i.logWriter.end(), 
                [ 2, new Promise(function(t, i) {
                    process.nextTick(function() {
                        n.socket ? (n.doUnbinds(n.socket), n.socket.end(function() {
                            n.closed = !0, t();
                        }), n.socket.once("error", function(t) {
                            i(t);
                        })) : (n.closed = !0, t());
                    });
                }) ];
            });
        });
    }, n.prototype.do_close = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (this.closed) return [ 3, 6 ];
                    t.label = 1;

                  case 1:
                    return t.trys.push([ 1, 3, , 4 ]), [ 4, this.compatibleOracle() ? this.commit() : this.rollback() ];

                  case 2:
                    return t.sent(), [ 3, 4 ];

                  case 3:
                    return t.sent(), [ 3, 4 ];

                  case 4:
                    return [ 4, this.free() ];

                  case 5:
                    t.sent(), t.label = 6;

                  case 6:
                    return [ 2 ];
                }
            });
        });
    }, n.prototype.getServerEncoding = function() {
        return this.conn_prop_sessEncode || this.serverEncoding;
    }, n.prototype.lobFetchAll = function() {
        return 2 === this.conn_prop_lobMode;
    }, n.prototype.do_openConnection = function(n) {
        return __awaiter(this, void 0, void 0, function() {
            var i, r = this;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (n && 0 < n.epList.length) return [ 2, n.connect(this) ];
                    t.label = 1;

                  case 1:
                    return t.trys.push([ 1, 4, 5, 11 ]), this.access = new access_1.Access(this), [ 4, new Promise(function(t, i) {
                        var n = setTimeout(function() {
                            r.socket && (r.socket.removeAllListeners(), r.socket.destroy()), i(error_1.DBError.ECJS_CONNECT_TIMEOUT());
                        }, r.conn_prop_connectTimeout);
                        r.socket = net_1.createConnection({
                            host: r.conn_prop_host,
                            port: r.conn_prop_port
                        }), r.socket.once("connect", function() {
                            clearTimeout(n), r.socket.removeAllListeners("error"), r.doBinds(r.socket), r.emit("connect"), 
                            t();
                        }), r.socket.on("error", function(t) {
                            clearTimeout(n), i(t);
                        });
                    }) ];

                  case 2:
                    return t.sent(), [ 4, this.access.P() ];

                  case 3:
                    return t.sent(), this.closed = !1, [ 2, this ];

                  case 4:
                    throw (i = t.sent()) instanceof error_1.DBError ? i : error_1.DBError.ECJS_COMMUNICATION_ERROR(i + "");

                  case 5:
                    return this.closed ? this instanceof PoolConnection ? [ 4, this.destroy() ] : [ 3, 7 ] : [ 3, 10 ];

                  case 6:
                    return t.sent(), [ 3, 9 ];

                  case 7:
                    return [ 4, this.free() ];

                  case 8:
                    t.sent(), t.label = 9;

                  case 9:
                    t.label = 10;

                  case 10:
                    return [ 7 ];

                  case 11:
                    return [ 2 ];
                }
            });
        });
    }, n.prototype.do_execute = function(o, c, u) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n, r, e, s;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if ("string" != typeof o) throw error_1.DBError.ECJS_INVALID_PARAM();
                    if (this.checkClosed(), (u = {
                        extendedMetaData: void 0 !== (u = u || {}).extendedMetaData ? u.extendedMetaData : dm_1.dmdb.extendedMetaData,
                        fetchInfo: u.fetchInfo,
                        outFormat: void 0 !== u.outFormat ? u.outFormat : dm_1.dmdb.outFormat,
                        resultSet: void 0 !== u.resultSet && u.resultSet,
                        innerExec: void 0 !== u.innerExec && u.innerExec
                    }).outFormat !== dm_1.dmdb.OUT_FORMAT_ARRAY && u.outFormat !== dm_1.dmdb.OUT_FORMAT_OBJECT) throw error_1.DBError.ECJS_INVALID_OUTFORMAT();
                    return Array.isArray(c) && 0 < c.length ? [ 4, (i = new statement_1.PreparedStatement(this, u, !1)).allocateHandle() ] : [ 3, 5 ];

                  case 1:
                    return t.sent(), [ 4, i.prepareSql(o) ];

                  case 2:
                    for (t.sent(), r = 0; r < c.length; r++) dm_1.dmdb.isBindParameter(c[r]) || (c[r] = {
                        dir: dm_1.dmdb.BIND_IN,
                        val: c[r]
                    });
                    return [ 4, i.executePstmt(c) ];

                  case 3:
                    return t.sent(), [ 4, i.close() ];

                  case 4:
                    return t.sent(), [ 2, i.execInfo.result ];

                  case 5:
                    return "object" != typeof c || Array.isArray(c) ? [ 3, 10 ] : [ 4, (i = new statement_1.PreparedStatement(this, u, !1)).allocateHandle() ];

                  case 6:
                    return t.sent(), [ 4, i.prepareSql(o) ];

                  case 7:
                    for (t.sent(), n = new Array(i.params.length), r = 0; r < i.params.length; r++) for (s in e = i.params[r], 
                    c) if (c.hasOwnProperty(s) && stringUtil_1.StringUtil.equalsIgnoreCase(s, e.name)) {
                        n[r] = dm_1.dmdb.isBindParameter(c[s]) ? c[s] : {
                            dir: dm_1.dmdb.BIND_IN,
                            val: c[s]
                        };
                        break;
                    }
                    return [ 4, i.executePstmt(n) ];

                  case 8:
                    return t.sent(), [ 4, i.close() ];

                  case 9:
                    return t.sent(), [ 2, i.execInfo.result ];

                  case 10:
                    return [ 2, this._executeInner(o, u) ];
                }
            });
        });
    }, n.prototype.do_executeMany = function(h, f, a) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n, r, e, s, o, c, u;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if ("string" != typeof h) throw error_1.DBError.ECJS_INVALID_PARAM();
                    if (this.checkClosed(), a = {
                        batchErrors: void 0 !== (a = a || {}).batchErrors ? a.batchErrors : this.conn_prop_continueBatchOnError,
                        dmlRowCounts: void 0 !== a.dmlRowCounts && a.dmlRowCounts
                    }, "number" != typeof f) return [ 3, 7 ];
                    if (!Number.isSafeInteger(f) || f < 1) throw error_1.DBError.ECJS_INVALID_PARAM("iterations must in 1~Number.MAX_SAFE_INTEGER");
                    return [ 4, (i = new statement_1.PreparedStatement(this, a, !0)).allocateHandle() ];

                  case 1:
                    return t.sent(), [ 4, i.prepareSql("BEGIN FOR i IN 1.." + f + " LOOP " + h + (h.trimRight().endsWith(";") ? "" : ";") + " END LOOP; END;") ];

                  case 2:
                    return t.sent(), 0 < i.paramCount ? [ 4, i.close() ] : [ 3, 4 ];

                  case 3:
                    throw t.sent(), error_1.DBError.ECJS_INVALID_SQL();

                  case 4:
                    return [ 4, i.executeManyPstmt([]) ];

                  case 5:
                    return t.sent(), [ 4, i.close() ];

                  case 6:
                    return t.sent(), delete i.execInfo.results.dmlRowCounts, delete i.execInfo.results.rowsAffected, 
                    [ 2, i.execInfo.results ];

                  case 7:
                    return Array.isArray(f) ? [ 4, (i = new statement_1.PreparedStatement(this, a, !0)).allocateHandle() ] : [ 3, 12 ];

                  case 8:
                    return t.sent(), [ 4, i.prepareSql(h) ];

                  case 9:
                    for (t.sent(), n = 0; n < f.length; n++) if (r = f[n], Array.isArray(r)) {
                        for (e = 0; e < r.length; e++) dm_1.dmdb.isBindParameter(r[e]) || (r[e] = {
                            dir: dm_1.dmdb.BIND_IN,
                            val: r[e]
                        });
                        f[n] = r;
                    } else if ("object" == typeof r) {
                        for (s = new Array(i.params.length), o = 0; o < i.params.length; o++) for (u in c = i.params[o], 
                        r) if (r.hasOwnProperty(u) && stringUtil_1.StringUtil.equalsIgnoreCase(u, c.name)) {
                            s[o] = dm_1.dmdb.isBindParameter(r[u]) ? r[u] : {
                                dir: dm_1.dmdb.BIND_IN,
                                val: r[u]
                            };
                            break;
                        }
                        f[n] = s;
                    }
                    return [ 4, i.executeManyPstmt(f) ];

                  case 10:
                    return t.sent(), [ 4, i.close() ];

                  case 11:
                    return t.sent(), [ 2, i.execInfo.results ];

                  case 12:
                    throw new Error("Function is called with invalid params!");
                }
            });
        });
    }, n.prototype.do_createLob = function(i) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return this.checkClosed(), [ 2, lob_1.Lob.newLob(i, this) ];
            });
        });
    }, n.prototype.do_commit = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this.checkClosed(), this.conn_prop_autoCommit ? [ 3, 2 ] : [ 4, this.access.T() ];

                  case 1:
                    return t.sent(), this.trxFinish = !0, [ 3, 3 ];

                  case 2:
                    if (!this.conn_prop_alwaysAllowCommit) throw error_1.DBError.ECJS_COMMIT_IN_AUTOCOMMIT_MODE();
                    t.label = 3;

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, n.prototype.do_getStatementInfo = function(r) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if ("string" != typeof r) throw error_1.DBError.ECJS_INVALID_PARAM();
                    return this.checkClosed(), [ 4, (i = new statement_1.PreparedStatement(this, {
                        extendedMetaData: dm_1.dmdb.extendedMetaData,
                        outFormat: dm_1.dmdb.outFormat,
                        resultSet: !1
                    }, !1)).allocateHandle() ];

                  case 1:
                    return t.sent(), [ 4, i.prepareSql(r) ];

                  case 2:
                    return t.sent(), n = {}, 0 < i.params.length && (n.bindNames = [], i.params.forEach(function(t) {
                        n.bindNames.push(t.name);
                    })), 0 < i.columns.length && (n.metaData = i.getMetaData(dm_1.dmdb.extendedMetaData)), 
                    n.statementType = i.execInfo.retSqlType, [ 2, n ];
                }
            });
        });
    }, n.prototype.do_rollback = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this.checkClosed(), this.conn_prop_autoCommit ? [ 3, 2 ] : [ 4, this.access.D() ];

                  case 1:
                    return t.sent(), this.trxFinish = !0, [ 3, 3 ];

                  case 2:
                    if (!this.conn_prop_alwaysAllowCommit) throw error_1.DBError.ECJS_ROLLBACK_IN_AUTOCOMMIT_MODE();
                    t.label = 3;

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, n.prototype.do_reconnect = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this instanceof PoolConnection ? [ 4, this.destroy() ] : [ 3, 2 ];

                  case 1:
                    return t.sent(), [ 3, 4 ];

                  case 2:
                    return [ 4, this.free() ];

                  case 3:
                    t.sent(), t.label = 4;

                  case 4:
                    return this.epGroup ? [ 4, this.epGroup.connect(this) ] : [ 3, 6 ];

                  case 5:
                    return t.sent(), [ 3, 8 ];

                  case 6:
                    return [ 4, this.do_openConnection() ];

                  case 7:
                    t.sent(), t.label = 8;

                  case 8:
                    return [ 2 ];
                }
            });
        });
    }, n.prototype.do_executeInner = function(n, r) {
        return __awaiter(this, void 0, void 0, function() {
            var i;
            return __generator(this, function(t) {
                return i = {
                    extendedMetaData: !1,
                    outFormat: dm_1.dmdb.OUT_FORMAT_ARRAY,
                    resultSet: !0,
                    innerExec: !0
                }, [ 2, this.do_execute(n, r, i) ];
            });
        });
    }, n.prototype._executeInner = function(r, e) {
        return __awaiter(this, void 0, void 0, function() {
            var i, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, (i = new statement_1.Statement(this, e, !1)).allocateHandle() ];

                  case 1:
                    return t.sent(), [ 4, i.execute(r) ];

                  case 2:
                    return n = t.sent(), [ 4, i.close() ];

                  case 3:
                    return t.sent(), [ 2, n ];
                }
            });
        });
    }, n.prototype._handleNetWorkError = function(t) {
        this.access.F(t);
    }, n.prototype._handleConnectTimeout = function() {
        this.socket && (this.socket.setTimeout(0), this.socket.destroy()), this._handleNetWorkError(error_1.DBError.ECJS_CONNECT_TIMEOUT());
    }, n.prototype.doBinds = function(i) {
        var n = this;
        tls_1.TLSSocket;
        return i.setNoDelay(!0), i.setKeepAlive(!0), i.on("error", function(t) {
            n._handleNetWorkError(t);
        }), i.on("end", function() {
            n.access.I(), n.closed = !0;
        }), i.on("close", function() {
            n.closed = !0;
        }), i.on("data", function(t) {
            n.access.R(t);
        }), this.access.on("data", function(t) {
            i.write(t);
        }), this.access.on("end", function() {
            i.end();
        }), i;
    }, n.prototype.doUnbinds = function(t) {
        t.removeAllListeners(), this.access.removeAllListeners();
    }, n.prototype.startTLS = function(r) {
        var e = this;
        return new Promise(function(t, i) {
            var n = e._createSecureContext();
            r ? (e.tlsSocket = tls_1.connect({
                secureContext: n,
                checkServerIdentity: function() {},
                socket: e.socket,
                rejectUnauthorized: !1,
                requestCert: !0
            }), e.tlsSocket.on("secureConnect", function() {
                t();
            }), e.tlsSocket.on("error", function(t) {
                i(t);
            }), e.doUnbinds(e.socket), e.socket = e.doBinds(e.tlsSocket)) : i(new Error("SSL Authentication not support"));
        });
    }, n.prototype._createSecureContext = function() {
        try {
            if (!this.conn_prop_sslPath) {
                var t = process.env.DM_HOME;
                if (!t) throw new Error("sslPath can not be empty.");
                this.conn_prop_sslPath = "" + t + path_1.sep + "bin" + path_1.sep + "client_ssl" + path_1.sep + this.conn_prop_user + path_1.sep;
            }
            return tls_1.createSecureContext({
                cert: fs_1.readFileSync(path_1.join(this.conn_prop_sslPath, "client-cert.pem")),
                key: fs_1.readFileSync(path_1.join(this.conn_prop_sslPath, "client-key.pem")),
                ca: [ fs_1.readFileSync(path_1.join(this.conn_prop_sslPath, "ca-cert.pem")) ],
                honorCipherOrder: !0,
                minVersion: "TLSv1",
                maxVersion: "TLSv1.3"
            });
        } catch (t) {
            throw error_1.DBError.ECJS_INIT_SSL_FAILED(t + "");
        }
    }, n.nextID = 0, n;
}(events_1.EventEmitter), PoolConnection = function(r) {
    function e(t, i) {
        var n = r.call(this, t) || this;
        return n.pool = i, n.on("close", function(t) {
            var i = void 0;
            try {
                n.pool.releaseConnection(n);
            } catch (t) {
                i = t;
            } finally {
                return void process.nextTick(t, i);
            }
        }), n;
    }
    return __extends(e, r), e.newInstanceOfPoolConnection = function(t, i) {
        var n = new e(t, i);
        return n.newMiddlewares(), n.idleCloseTimer = new timer_1.Timer(function() {
            n.pool.eliminateConnection(n);
        }), n;
    }, e.prototype.newMiddlewares = function() {
        this.middlewares = new middleware_1.Middlewares(this, this.props, e.nextID++, this.pool.middlewares);
    }, e.prototype.free = function() {
        return __awaiter(this, void 0, void 0, function() {
            var r = this;
            return __generator(this, function(t) {
                return [ 2, new Promise(function(i, n) {
                    r.emit("close", function(t) {
                        t ? n(t) : i();
                    });
                }) ];
            });
        });
    }, e.prototype.destroy = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.prototype.free.call(this) ];
            });
        });
    }, e.prototype.startTimer = function() {
        0 < this.pool.poolTimeout && this.idleCloseTimer && this.idleCloseTimer.start(1e3 * this.pool.poolTimeout);
    }, e.prototype.refreshTimer = function() {
        this.idleCloseTimer && this.idleCloseTimer.refresh();
    }, e.prototype.stopTimer = function() {
        this.idleCloseTimer && this.idleCloseTimer.stop();
    }, e;
}(exports.Connection = Connection);

exports.PoolConnection = PoolConnection;