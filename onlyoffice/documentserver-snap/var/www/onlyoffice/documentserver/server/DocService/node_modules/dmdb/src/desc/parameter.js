"use strict";

var __extends = this && this.__extends || function() {
    var b = function(e, t) {
        return (b = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(e, t) {
            e.__proto__ = t;
        } || function(e, t) {
            for (var s in t) t.hasOwnProperty(s) && (e[s] = t[s]);
        })(e, t);
    };
    return function(e, t) {
        function s() {
            this.constructor = e;
        }
        b(e, t), e.prototype = null === t ? Object.create(t) : (s.prototype = t.prototype, 
        new s());
    };
}();

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var const_1 = require("./const"), column_1 = require("./column"), dbtype_1 = require("../driver/dbtype"), Parameter = function(t) {
    function s() {
        var e = null !== t && t.apply(this, arguments) || this;
        return e.typeFlag = s.TYPE_FLAG_UNKNOWN, e.ioType = s.IO_TYPE_IN, e.outJType = const_1.Const.IGNORE_TARGET_TYPE, 
        e.outScale = const_1.Const.IGNORE_TARGET_SCALE, e;
    }
    return __extends(s, t), s.prototype.resetType = function(e) {
        if (this.typeFlag !== s.TYPE_FLAG_EXACT) switch (this.type = e, this.scale = 0, 
        e) {
          case dbtype_1.DBType.BOOLEAN:
          case dbtype_1.DBType.BIT:
            this.prec = dbtype_1.DBType.BIT_PREC;
            break;

          case dbtype_1.DBType.TINYINT:
            this.prec = dbtype_1.DBType.TINYINT_PREC;
            break;

          case dbtype_1.DBType.SMALLINT:
            this.prec = dbtype_1.DBType.SMALLINT_PREC;
            break;

          case dbtype_1.DBType.INT:
            this.prec = dbtype_1.DBType.INT_PREC;
            break;

          case dbtype_1.DBType.BIGINT:
            this.prec = dbtype_1.DBType.BIGINT_PREC;
            break;

          case dbtype_1.DBType.CHAR:
          case dbtype_1.DBType.VARCHAR:
          case dbtype_1.DBType.VARCHAR2:
            this.prec = dbtype_1.DBType.VARCHAR_PREC;
            break;

          case dbtype_1.DBType.CLOB:
            this.prec = dbtype_1.DBType.CLOB_PREC;
            break;

          case dbtype_1.DBType.BINARY:
          case dbtype_1.DBType.VARBINARY:
            this.prec = dbtype_1.DBType.VARBINARY_PREC;
            break;

          case dbtype_1.DBType.BLOB:
            this.prec = dbtype_1.DBType.BLOB_PREC;
            break;

          case dbtype_1.DBType.DATE:
            this.prec = dbtype_1.DBType.DATE_PREC;
            break;

          case dbtype_1.DBType.TIME:
            this.prec = dbtype_1.DBType.TIME_PREC, this.scale = 6;
            break;

          case dbtype_1.DBType.TIME_TZ:
            this.prec = dbtype_1.DBType.TIME_TZ_PREC, this.scale = 6;
            break;

          case dbtype_1.DBType.DATETIME:
            this.prec = dbtype_1.DBType.DATETIME_PREC, this.scale = 6;
            break;

          case dbtype_1.DBType.DATETIME_TZ:
            this.prec = dbtype_1.DBType.DATETIME_TZ_PREC, this.scale = 6;
            break;

          case dbtype_1.DBType.REAL:
          case dbtype_1.DBType.DOUBLE:
          case dbtype_1.DBType.DECIMAL:
          case dbtype_1.DBType.INTERVAL_YM:
          case dbtype_1.DBType.INTERVAL_DT:
          case dbtype_1.DBType.ARRAY:
          case dbtype_1.DBType.CLASS:
          case dbtype_1.DBType.PLTYPE_RECORD:
          case dbtype_1.DBType.SARRAY:
            this.prec = 0;
            break;

          case dbtype_1.DBType.UNKNOWN:
          case dbtype_1.DBType.NULL:
            this.type = dbtype_1.DBType.VARCHAR, this.prec = dbtype_1.DBType.VARCHAR_PREC;
        }
    }, s.TYPE_FLAG_UNKNOWN = 0, s.TYPE_FLAG_EXACT = 1, s.TYPE_FLAG_RECOMMEND = 2, s.IO_TYPE_IN = 0, 
    s.IO_TYPE_OUT = 1, s.IO_TYPE_INOUT = 2, s;
}(column_1.Column);

exports.Parameter = Parameter;