"use strict";

var __awaiter = this && this.__awaiter || function(r, o, c, a) {
    return new (c = c || Promise)(function(n, t) {
        function e(r) {
            try {
                u(a.next(r));
            } catch (r) {
                t(r);
            }
        }
        function i(r) {
            try {
                u(a.throw(r));
            } catch (r) {
                t(r);
            }
        }
        function u(r) {
            var t;
            r.done ? n(r.value) : ((t = r.value) instanceof c ? t : new c(function(r) {
                r(t);
            })).then(e, i);
        }
        u((a = a.apply(r, o || [])).next());
    });
}, __generator = this && this.__generator || function(n, e) {
    var i, u, o, c = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    }, r = {
        next: t(0),
        throw: t(1),
        return: t(2)
    };
    return "function" == typeof Symbol && (r[Symbol.iterator] = function() {
        return this;
    }), r;
    function t(t) {
        return function(r) {
            return function(t) {
                if (i) throw new TypeError("Generator is already executing.");
                for (;c; ) try {
                    if (i = 1, u && (o = 2 & t[0] ? u.return : t[0] ? u.throw || ((o = u.return) && o.call(u), 
                    0) : u.next) && !(o = o.call(u, t[1])).done) return o;
                    switch (u = 0, o && (t = [ 2 & t[0], o.value ]), t[0]) {
                      case 0:
                      case 1:
                        o = t;
                        break;

                      case 4:
                        return c.label++, {
                            value: t[1],
                            done: !1
                        };

                      case 5:
                        c.label++, u = t[1], t = [ 0 ];
                        continue;

                      case 7:
                        t = c.ops.pop(), c.trys.pop();
                        continue;

                      default:
                        if (!(o = 0 < (o = c.trys).length && o[o.length - 1]) && (6 === t[0] || 2 === t[0])) {
                            c = 0;
                            continue;
                        }
                        if (3 === t[0] && (!o || t[1] > o[0] && t[1] < o[3])) {
                            c.label = t[1];
                            break;
                        }
                        if (6 === t[0] && c.label < o[1]) {
                            c.label = o[1], o = t;
                            break;
                        }
                        if (o && c.label < o[2]) {
                            c.label = o[2], c.ops.push(t);
                            break;
                        }
                        o[2] && c.ops.pop(), c.trys.pop();
                        continue;
                    }
                    t = e.call(n, c);
                } catch (r) {
                    t = [ 6, r ], u = 0;
                } finally {
                    i = o = 0;
                }
                if (5 & t[0]) throw t[1];
                return {
                    value: t[0] ? t[1] : void 0,
                    done: !0
                };
            }([ t, r ]);
        };
    }
}, __values = this && this.__values || function(r) {
    var t = "function" == typeof Symbol && Symbol.iterator, n = t && r[t], e = 0;
    if (n) return n.call(r);
    if (r && "number" == typeof r.length) return {
        next: function() {
            return r && e >= r.length && (r = void 0), {
                value: r && r[e++],
                done: !r
            };
        }
    };
    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var rwUtil_1 = require("../rw/rwUtil"), error_1 = require("../../driver/error"), const_1 = require("../../desc/const"), ep_1 = require("../../desc/ep"), stringUtil_1 = require("../../utils/stringUtil"), ReconnectMiddleware = function() {
    function o() {}
    return o.getInstance = function() {
        return this.instance;
    }, o.reconnect = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 5, , 6 ]), t.conn_prop_rwSeparate ? [ 4, rwUtil_1.RWUtil.reconnect(t) ] : [ 3, 2 ];

                  case 1:
                    return r.sent(), [ 3, 4 ];

                  case 2:
                    return [ 4, t.do_reconnect() ];

                  case 3:
                    r.sent(), r.label = 4;

                  case 4:
                    return [ 3, 6 ];

                  case 5:
                    return r.sent(), error_1.DBError.ECJS_CONNECTION_SWITCH_FAILED(n), [ 3, 6 ];

                  case 6:
                    return error_1.DBError.ECJS_CONNECTION_SWITCHED(n), [ 2 ];
                }
            });
        });
    }, o.prototype.autoReconnect = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                if (n instanceof error_1.DBError && n.errCode === error_1.DBError.ECJS_COMMUNICATION_ERROR().errCode) return [ 2, o.reconnect(t, n.message) ];
                throw n;
            });
        });
    }, o.prototype.checkAndRecover = function(h) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, e, i, u, o, c, a, s, _, f;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return h.conn_prop_doSwitch !== const_1.Const.DO_SWITCH_WHEN_EP_RECOVER ? [ 2 ] : (t = 0, 
                    !h.trxFinish || 0 === (t = h.getIndexOnEPGroup()) || Date.now() - h.middlewares.recoverInfo.checkEpRecoverTs < h.conn_prop_switchInterval ? [ 2 ] : h.conn_prop_cluster !== const_1.Const.CLUSTER_TYPE_DSC ? [ 3, 2 ] : [ 4, this.loadDscEpSites(h) ]);

                  case 1:
                    return e = r.sent(), [ 3, 3 ];

                  case 2:
                    e = null, r.label = 3;

                  case 3:
                    if (!(n = e) || 0 === n.length) return [ 2 ];
                    i = !1;
                    try {
                        for (u = __values(n), o = u.next(); !o.done; o = u.next()) if ((c = o.value).epStatus === const_1.Const.EP_STATUS_OK) {
                            for (a = 0; a < t; a++) if (s = h.epGroup.epList[a], c.host === s.host && c.port === s.port) {
                                i = !0;
                                break;
                            }
                            if (i) break;
                        }
                    } catch (r) {
                        _ = {
                            error: r
                        };
                    } finally {
                        try {
                            o && !o.done && (f = u.return) && f.call(u);
                        } finally {
                            if (_) throw _.error;
                        }
                    }
                    return h.middlewares.recoverInfo.checkEpRecoverTs = Date.now(), i ? [ 2, h.do_reconnect() ] : [ 2 ];
                }
            });
        });
    }, o.prototype.loadDscEpSites = function(u) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, e, i;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 6, , 7 ]), [ 4, u.do_executeInner(o.SQL_GET_DSC_EP_SITE) ];

                  case 1:
                    t = r.sent(), n = [], e = void 0, r.label = 2;

                  case 2:
                    return [ 4, t.resultSet.do_getRow() ];

                  case 3:
                    return (e = r.sent()) ? ((i = new ep_1.EP(e[1], e[2])).epSeqno = e[0], i.epStatus = stringUtil_1.StringUtil.equalsIgnoreCase(e[3], "ok") ? const_1.Const.EP_STATUS_OK : const_1.Const.EP_STATUS_ERROR, 
                    n.push(i), [ 3, 2 ]) : [ 3, 4 ];

                  case 4:
                    return [ 4, t.resultSet.do_close() ];

                  case 5:
                    return r.sent(), [ 2, n ];

                  case 6:
                    return r.sent(), [ 3, 7 ];

                  case 7:
                    return [ 2, null ];
                }
            });
        });
    }, o.prototype.connection_openConnection = function(t, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.connection_openConnection(n, e) ];
            });
        });
    }, o.prototype.connection_execute = function(n, e, i, u, o) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 2, , 4 ]), [ 4, this.checkAndRecover(e) ];

                  case 1:
                    return r.sent(), [ 2, n.connection_execute(e, i, u, o) ];

                  case 2:
                    return t = r.sent(), [ 4, this.autoReconnect(e, t) ];

                  case 3:
                    return r.sent(), [ 2, null ];

                  case 4:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.connection_executeMany = function(n, e, i, u, o) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 2, , 4 ]), [ 4, this.checkAndRecover(e) ];

                  case 1:
                    return r.sent(), [ 2, n.connection_executeMany(e, i, u, o) ];

                  case 2:
                    return t = r.sent(), [ 4, this.autoReconnect(e, t) ];

                  case 3:
                    return r.sent(), [ 2, null ];

                  case 4:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.connection_createLob = function(t, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.connection_createLob(n, e) ];
            });
        });
    }, o.prototype.connection_close = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                try {
                    return [ 2, t.connection_close(n) ];
                } catch (r) {
                    return [ 2, this.autoReconnect(n, r) ];
                }
                return [ 2 ];
            });
        });
    }, o.prototype.connection_commit = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 2, , 3 ]), [ 4, n.connection_commit(e) ];

                  case 1:
                    return r.sent(), [ 2, this.checkAndRecover(e) ];

                  case 2:
                    return t = r.sent(), [ 2, this.autoReconnect(e, t) ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.connection_getStatementInfo = function(n, e, i) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 2, , 4 ]), [ 4, this.checkAndRecover(e) ];

                  case 1:
                    return r.sent(), [ 2, n.connection_getStatementInfo(e, i) ];

                  case 2:
                    return t = r.sent(), [ 4, this.autoReconnect(e, t) ];

                  case 3:
                    return r.sent(), [ 2, null ];

                  case 4:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.connection_rollback = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                try {
                    return [ 2, t.connection_rollback(n) ];
                } catch (r) {
                    return [ 2, this.autoReconnect(n, r) ];
                }
                return [ 2 ];
            });
        });
    }, o.prototype.lob_close = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.lob_close(n) ];
            });
        });
    }, o.prototype.lob_getData = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 1, , 3 ]), [ 2, n.lob_getData(e) ];

                  case 1:
                    return t = r.sent(), [ 4, this.autoReconnect(e.iLob.conn, t) ];

                  case 2:
                    return r.sent(), [ 2, null ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.lob_getLength = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 1, , 3 ]), [ 2, n.lob_getLength(e) ];

                  case 1:
                    return t = r.sent(), [ 4, this.autoReconnect(e.iLob.conn, t) ];

                  case 2:
                    return r.sent(), [ 2, 0 ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.pool_getConnection = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.pool_getConnection(n) ];
            });
        });
    }, o.prototype.pool_close = function(t, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.pool_close(n, e) ];
            });
        });
    }, o.prototype.resultSet_close = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [ 2, t.resultSet_close(n) ];
            });
        });
    }, o.prototype.resultSet_getRow = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                try {
                    return [ 2, t.resultSet_getRow(n) ];
                } catch (r) {
                    return [ 2, this.autoReconnect(n.conn, r) ];
                }
                return [ 2 ];
            });
        });
    }, o.prototype.resultSet_getRows = function(n, e, i) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 1, , 3 ]), [ 2, n.resultSet_getRows(e, i) ];

                  case 1:
                    return t = r.sent(), [ 4, this.autoReconnect(e.conn, t) ];

                  case 2:
                    return r.sent(), [ 2, [] ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, o.prototype.resultSet_getRowCount = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return r.trys.push([ 0, 1, , 3 ]), [ 2, n.resultSet_getRowCount(e) ];

                  case 1:
                    return t = r.sent(), [ 4, this.autoReconnect(e.conn, t) ];

                  case 2:
                    return r.sent(), [ 2, 0 ];

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, o.SQL_GET_DSC_EP_SITE = "SELECT dsc.ep_seqno, (CASE mal.MAL_INST_HOST WHEN '' THEN mal.MAL_HOST ELSE mal.MAL_INST_HOST END) as ep_host, dcr.EP_PORT, dsc.EP_STATUS FROM V$DSC_EP_INFO dsc LEFT join V$DM_MAL_INI mal on dsc.EP_NAME = mal.MAL_INST_NAME LEFT join (SELECT grp.GROUP_TYPE GROUP_TYPE, ep.* FROM SYS.\"V$DCR_GROUP\" grp, SYS.\"V$DCR_EP\" ep where grp.GROUP_NAME = ep.GROUP_NAME) dcr on dsc.EP_NAME = dcr.EP_NAME and GROUP_TYPE = 'DB' order by  dsc.ep_seqno asc;", 
    o.instance = new o(), o;
}();

exports.ReconnectMiddleware = ReconnectMiddleware;