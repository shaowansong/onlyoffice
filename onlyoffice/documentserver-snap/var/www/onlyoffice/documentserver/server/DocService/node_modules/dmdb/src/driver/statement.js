"use strict";

var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
        })(t, e);
    };
    return function(t, e) {
        function r() {
            this.constructor = t;
        }
        i(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, 
        new r());
    };
}(), __awaiter = this && this.__awaiter || function(t, h, u, c) {
    return new (u = u || Promise)(function(r, e) {
        function i(t) {
            try {
                n(c.next(t));
            } catch (t) {
                e(t);
            }
        }
        function s(t) {
            try {
                n(c.throw(t));
            } catch (t) {
                e(t);
            }
        }
        function n(t) {
            var e;
            t.done ? r(t.value) : ((e = t.value) instanceof u ? e : new u(function(t) {
                t(e);
            })).then(i, s);
        }
        n((c = c.apply(t, h || [])).next());
    });
}, __generator = this && this.__generator || function(r, i) {
    var s, n, h, u = {
        label: 0,
        sent: function() {
            if (1 & h[0]) throw h[1];
            return h[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: e(0),
        throw: e(1),
        return: e(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function e(e) {
        return function(t) {
            return function(e) {
                if (s) throw new TypeError("Generator is already executing.");
                for (;u; ) try {
                    if (s = 1, n && (h = 2 & e[0] ? n.return : e[0] ? n.throw || ((h = n.return) && h.call(n), 
                    0) : n.next) && !(h = h.call(n, e[1])).done) return h;
                    switch (n = 0, h && (e = [ 2 & e[0], h.value ]), e[0]) {
                      case 0:
                      case 1:
                        h = e;
                        break;

                      case 4:
                        return u.label++, {
                            value: e[1],
                            done: !1
                        };

                      case 5:
                        u.label++, n = e[1], e = [ 0 ];
                        continue;

                      case 7:
                        e = u.ops.pop(), u.trys.pop();
                        continue;

                      default:
                        if (!(h = 0 < (h = u.trys).length && h[h.length - 1]) && (6 === e[0] || 2 === e[0])) {
                            u = 0;
                            continue;
                        }
                        if (3 === e[0] && (!h || e[1] > h[0] && e[1] < h[3])) {
                            u.label = e[1];
                            break;
                        }
                        if (6 === e[0] && u.label < h[1]) {
                            u.label = h[1], h = e;
                            break;
                        }
                        if (h && u.label < h[2]) {
                            u.label = h[2], u.ops.push(e);
                            break;
                        }
                        h[2] && u.ops.pop(), u.trys.pop();
                        continue;
                    }
                    e = i.call(r, u);
                } catch (t) {
                    e = [ 6, t ], n = 0;
                } finally {
                    s = h = 0;
                }
                if (5 & e[0]) throw e[1];
                return {
                    value: e[0] ? e[1] : void 0,
                    done: !0
                };
            }([ e, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var executeRetInfo_1 = require("../desc/executeRetInfo"), error_1 = require("./error"), parameter_1 = require("../desc/parameter"), sqlProcessor_1 = require("../parser/sqlProcessor"), resultSet_1 = require("./resultSet"), dm_1 = require("../dm"), stmtInfo_1 = require("../desc/stmtInfo"), resultSetCachePool_1 = require("./resultSetCachePool"), dbtype_1 = require("./dbtype"), j2db_1 = require("../convert/j2db"), lob_1 = require("./lob"), enums_1 = require("../desc/enums"), db2j_1 = require("../convert/db2j"), stream_1 = require("stream"), const_1 = require("../desc/const"), Statement = function() {
    function i(t, e, r) {
        this.handle = 0, this.cursorUpdateRow = 0, this.closeOnCompletion = !1, this.closed = !0, 
        this.poolable = !0, this.columns = new Array(0), this.running = !1, this.isExecuteMany = !1, 
        this.type = i.STATEMENT, this.connection = t, this.escapeProcessing = t.conn_prop_escapeProcess, 
        this.maxRows = BigInt(t.conn_prop_maxRows), this.queryTimeout = t.conn_prop_sessionTimeout, 
        this.execOpts = e, this.innerExec = !r && e.innerExec || !1, this.isExecuteMany = r;
    }
    return i.prototype.execute = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, this.executeInner(e, 0) ];
            });
        });
    }, i.prototype.allocateHandle = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return (e = this.connection.stmtPool && 0 < this.connection.stmtPool.size() ? this.connection.stmtPool.get() : void 0) ? (this.handle = e.handle, 
                    this.cursorName = e.cursorName, this.readBaseColName = e.readBaseColName, [ 3, 3 ]) : [ 3, 1 ];

                  case 1:
                    return [ 4, this.connection.access.J(this) ];

                  case 2:
                    t.sent(), t.label = 3;

                  case 3:
                    return this.closed = !1, [ 2 ];
                }
            });
        });
    }, i.prototype.close = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return !this.closed && this.poolable && 0 < this.connection.conn_prop_stmtPoolSize ? [ 2, this.connection.stmtPool.put(new stmtInfo_1.StmtInfo(this.handle, this.cursorName, this.readBaseColName)) ] : [ 2, this.free() ];
            });
        });
    }, i.prototype.free = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (this.closed || !this.connection || !this.connection.access || this.connection.closed) return [ 3, 4 ];
                    t.label = 1;

                  case 1:
                    return t.trys.push([ 1, 3, , 4 ]), [ 4, this.connection.access.A(this.handle) ];

                  case 2:
                    return t.sent(), [ 3, 4 ];

                  case 3:
                    return t.sent(), [ 3, 4 ];

                  case 4:
                    return this.closed = !0, [ 2 ];
                }
            });
        });
    }, i.prototype.getMetaData = function(r) {
        var i = this, s = new Array(this.columns.length);
        return this.columns.forEach(function(t, e) {
            s[e] = {
                name: i.columnNameCaseCvt(i.connection.conn_prop_columnNameCase, t.name)
            }, r && (s[e].dbType = t.type, s[e].dbTypeName = t.typeName, s[e].precision = t.prec, 
            s[e].scale = t.scale, s[e].nullable = t.nullable);
        }), s;
    }, i.prototype.executeInner = function(u, c) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i, s, n, h;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (!u) throw error_1.DBError.ECJS_SQL_IS_EMPTY();
                    if (this.nativeSql = u, this.escapeProcessing) try {
                        this.nativeSql = sqlProcessor_1.SQLProcessor.escape(u, this.connection.conn_prop_keyWords);
                    } catch (t) {}
                    if (e = null, this.connection.constParaOpt) {
                        e = new Array();
                        try {
                            this.nativeSql = sqlProcessor_1.SQLProcessor.execOpt(this.nativeSql, e, this.connection.getServerEncoding());
                        } catch (t) {}
                    }
                    return this.connection.conn_prop_enRsCache ? (r = resultSetCachePool_1.ResultSetCachePool.get(this.connection.guid || "", this.connection.schema || "", this.nativeSql, this)) ? (this.execInfo = r.execInfo, 
                    this.connection.lastExecInfo = r.execInfo, [ 4, this.genResult(r.getResultSet(this)) ]) : [ 3, 2 ] : [ 3, 2 ];

                  case 1:
                    return t.sent(), [ 2, this.execInfo.result ];

                  case 2:
                    if (!(e && 0 < e.length)) return [ 3, 8 ];
                    t.label = 3;

                  case 3:
                    return t.trys.push([ 3, 5, , 7 ]), [ 4, (i = this).connection.access.Q(this, e) ];

                  case 4:
                    return i.execInfo = t.sent(), [ 3, 7 ];

                  case 5:
                    if ((s = t.sent()) instanceof error_1.DBError && (s.errCode === error_1.DBError.ECJS_COMMUNICATION_ERROR().errCode || s.errCode === error_1.DBError.EC_RN_OPERATION_CANCELED().errCode || s.errCode === error_1.DBError.EC_EXCEED_SESSION_REQUEST_LIMIT().errCode)) throw s;
                    return this.nativeSql = u, [ 4, (n = this).connection.access.V(this, c) ];

                  case 6:
                    return n.execInfo = t.sent(), [ 3, 7 ];

                  case 7:
                    return [ 3, 10 ];

                  case 8:
                    return [ 4, (h = this).connection.access.V(this, c) ];

                  case 9:
                    h.execInfo = t.sent(), t.label = 10;

                  case 10:
                    return this.connection.lastExecInfo = this.execInfo, this.execInfo.hasResultSet ? [ 4, this.genResult() ] : [ 3, 12 ];

                  case 11:
                    return t.sent(), [ 3, 13 ];

                  case 12:
                    this.execInfo.result = new executeRetInfo_1.Result(this.connection), this.execInfo.result.rowsAffected = Number(this.execInfo.updateCount), 
                    t.label = 13;

                  case 13:
                    return [ 2, this.execInfo.result ];
                }
            });
        });
    }, i.prototype.genResult = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return this.isExecuteMany ? [ 3, 3 ] : [ 4, this.loadResult(this.execInfo, e) ];

                  case 1:
                    return t.sent(), [ 4, this.loadMoreResult(this.execInfo) ];

                  case 2:
                    t.sent(), !e && this.connection.conn_prop_enRsCache && 0 < this.execInfo.rsCacheOffset && this.execInfo.rsDatas && this.execInfo.rsDatas.length === Number(this.execInfo.updateCount) && resultSetCachePool_1.ResultSetCachePool.put(this, this.nativeSql, this.execInfo), 
                    t.label = 3;

                  case 3:
                    return [ 2 ];
                }
            });
        });
    }, i.prototype.loadResult = function(i, s) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return (i.result = new executeRetInfo_1.Result(this.connection), i.result.metaData = this.getMetaData(this.execOpts.extendedMetaData), 
                    e = s || new resultSet_1.ResultSet(1, this, i), this.execOpts.resultSet) ? (delete i.result.rows, 
                    i.result.resultSet = e, [ 3, 6 ]) : [ 3, 1 ];

                  case 1:
                    return delete i.result.resultSet, i.result.rows = new Array(), [ 4, e.getRow() ];

                  case 2:
                    r = t.sent(), t.label = 3;

                  case 3:
                    if (void 0 === r) return [ 3, 6 ];
                    i.result.rows.push(r), t.label = 4;

                  case 4:
                    return [ 4, e.getRow() ];

                  case 5:
                    return r = t.sent(), [ 3, 3 ];

                  case 6:
                    return [ 2 ];
                }
            });
        });
    }, i.prototype.loadMoreResult = function(s) {
        var n;
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return r = e = void 0, [ 4, this.connection.access.W(this, 0) ];

                  case 1:
                    i = t.sent(), t.label = 2;

                  case 2:
                    return i.hasResultSet ? [ 4, this.loadResult(i) ] : [ 3, 5 ];

                  case 3:
                    return t.sent(), void 0 === e && (e = []), void 0 === r && (r = []), e.push(i.result.rows || i.result.resultSet), 
                    r.push(i.result.metaData), [ 4, this.connection.access.W(this, 0) ];

                  case 4:
                    return i = t.sent(), [ 3, 2 ];

                  case 5:
                    return void 0 !== e && void 0 !== r && (e.unshift(s.result.rows || (null === (n = s.result) || void 0 === n ? void 0 : n.resultSet)), 
                    r.unshift(s.result.metaData), delete s.result.rows, delete s.result.resultSet, delete s.result.metaData, 
                    s.result.implicitResults = e, s.result.metaData = r), [ 2 ];
                }
            });
        });
    }, i.prototype.columnNameCaseCvt = function(t, e) {
        return t === const_1.Const.COLUMN_NAME_NATURAL_CASE ? e : t === const_1.Const.COLUMN_NAME_UPPER_CASE ? e.toUpperCase() : t === const_1.Const.COLUMN_NAME_LOWER_CASE ? e.toLowerCase() : e;
    }, i.STATEMENT = 1, i.PREPARED_STATEMENT = 2, i.CALLABLE_STATEMENT = 3, i;
}(), PreparedStatement = function(s) {
    function w(t, e, r) {
        var i = s.call(this, t, e, r) || this;
        return i.params = new Array(0), i.paramCount = 0, i.rowIndex = 0, i.preExec = !1, 
        i.type = Statement.PREPARED_STATEMENT, i.paramObjectsList = new Array(), i.curRowObjects = new Array(i.paramCount), 
        i.curRowBindIndicator = Buffer.alloc(i.paramCount), i;
    }
    return __extends(w, s), w.prototype.prepareSql = function(r) {
        return __awaiter(this, void 0, void 0, function() {
            var e;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (!r) throw error_1.DBError.ECJS_SQL_IS_EMPTY();
                    if (this.nativeSql = r, this.escapeProcessing) try {
                        this.nativeSql = sqlProcessor_1.SQLProcessor.escape(r, this.connection.conn_prop_keyWords);
                    } catch (t) {}
                    return [ 4, this.connection.access.X(this) ];

                  case 1:
                    return e = t.sent(), this.execInfo = e, [ 2 ];
                }
            });
        });
    }, w.prototype.executePstmt = function(s) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, this._encodeArgs(s) ];

                  case 1:
                    return e = t.sent(), [ 4, (r = this).connection.access.Y(this, e, !1) ];

                  case 2:
                    return r.execInfo = t.sent(), this.connection.lastExecInfo = this.execInfo, this.execInfo.hasResultSet ? [ 4, this.genResult() ] : [ 3, 4 ];

                  case 3:
                    return t.sent(), [ 3, 5 ];

                  case 4:
                    this.execInfo.result = new executeRetInfo_1.Result(this.connection), this.execInfo.result.rowsAffected = Number(this.execInfo.updateCount), 
                    t.label = 5;

                  case 5:
                    return this.execInfo.outParamDatas && 0 < this.execInfo.outParamDatas.length ? (this.execInfo.result || (this.execInfo.result = new executeRetInfo_1.Result(this.connection)), 
                    i = this.execInfo.result, [ 4, this.genOutParamDatas() ]) : [ 3, 7 ];

                  case 6:
                    i.outBinds = t.sent(), t.label = 7;

                  case 7:
                    return [ 2 ];
                }
            });
        });
    }, w.prototype.executeManyPstmt = function(a) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i, s, n, h, u, c;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    if (e = new Array(a.length), !(0 < this.paramCount)) return [ 3, 4 ];
                    r = 0, t.label = 1;

                  case 1:
                    return r < a.length ? (i = a[r], s = e, n = r, [ 4, this._encodeArgs(i) ]) : [ 3, 4 ];

                  case 2:
                    s[n] = t.sent(), t.label = 3;

                  case 3:
                    return r++, [ 3, 1 ];

                  case 4:
                    if (this.execInfo.retSqlType === const_1.Const.SQL_TYPE_DML_SELECT || this.execInfo.retSqlType === const_1.Const.SQL_TYPE_DML_CURSOR_OPEN) throw error_1.DBError.ECJS_INVALID_SQL_TYPE();
                    return 0 !== e.length ? [ 3, 6 ] : [ 4, (h = this).connection.access.Z(this, []) ];

                  case 5:
                    return h.execInfo = t.sent(), [ 3, 10 ];

                  case 6:
                    return 1 === e.length || 2 === this.connection.conn_prop_batchType || this.connection.conn_prop_batchNotOnCall && this.execInfo.retSqlType === const_1.Const.SQL_TYPE_DML_CALL ? [ 4, (u = this).connection.access.$(this, e, this.preExec) ] : [ 3, 8 ];

                  case 7:
                    return u.execInfo = t.sent(), [ 3, 10 ];

                  case 8:
                    return [ 4, (c = this).connection.access.tt(this, e, this.preExec) ];

                  case 9:
                    c.execInfo = t.sent(), t.label = 10;

                  case 10:
                    return this.execInfo.results = new executeRetInfo_1.Results(this.connection), this.execInfo.results.batchErrors = this.execInfo.batchErrors, 
                    this.execOpts.dmlRowCounts && (this.execInfo.results.dmlRowCounts = this.execInfo.updateCounts), 
                    this.execInfo.updateCounts && 0 != this.execInfo.updateCounts.length ? this.execInfo.results.rowsAffected = this.execInfo.updateCounts.reduce(function(t, e) {
                        return (t < 0 ? 0 : t) + (e < 0 ? 0 : e);
                    }) : this.execInfo.results.rowsAffected = 0, this.execInfo.results.outBinds = [], 
                    [ 2 ];
                }
            });
        });
    }, w.prototype._encodeArgs = function(v) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i, s, n, h, u, c, a, o, _, f, d;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    e = new Array(v.length), r = 0, t.label = 1;

                  case 1:
                    return r < this.params.length ? (i = v[r], this.params[r].type !== dbtype_1.DBType.CURSOR ? [ 3, 4 ] : this.params[r].cursorStmt ? [ 3, 3 ] : (this.params[r].cursorStmt = new Statement(this.connection, this.execOpts, !1), 
                    [ 4, this.params[r].cursorStmt.allocateHandle() ])) : [ 3, 24 ];

                  case 2:
                    t.sent(), t.label = 3;

                  case 3:
                    return this.curRowBindIndicator[r] |= w.BIND_IN, [ 3, 23 ];

                  case 4:
                    return null != i && void 0 !== i.val && null !== i.val ? [ 3, 5 ] : (e[r] = enums_1.ParamDataEnum.NULL, 
                    [ 3, 23 ]);

                  case 5:
                    return "number" != typeof i.val ? [ 3, 6 ] : (Number.isNaN(i.val) || !Number.isFinite(i.val) ? e[r] = enums_1.ParamDataEnum.NULL : (this.params[r].resetType(dbtype_1.DBType.DOUBLE), 
                    e[r] = j2db_1.J2DB.fromNumber(i.val, this.params[r], this.connection)), [ 3, 23 ]);

                  case 6:
                    return "bigint" != typeof i.val ? [ 3, 7 ] : (this.params[r].resetType(dbtype_1.DBType.BIGINT), 
                    e[r] = j2db_1.J2DB.fromBigInt(i.val, this.params[r], this.connection), [ 3, 23 ]);

                  case 7:
                    return "string" != typeof i.val ? [ 3, 11 ] : "" === i.val && dbtype_1.DBType.emptyStringToNull(this.params[r].type) ? (e[r] = enums_1.ParamDataEnum.NULL, 
                    [ 3, 10 ]) : [ 3, 8 ];

                  case 8:
                    return this.params[r].resetType(dbtype_1.DBType.VARCHAR), s = e, n = r, [ 4, j2db_1.J2DB.fromString(i.val, this.params[r], this.connection) ];

                  case 9:
                    s[n] = t.sent(), t.label = 10;

                  case 10:
                    return [ 3, 23 ];

                  case 11:
                    return "boolean" != typeof i.val ? [ 3, 12 ] : (this.params[r].resetType(dbtype_1.DBType.TINYINT), 
                    e[r] = j2db_1.J2DB.fromBoolean(i.val, this.params[r], this.connection), [ 3, 23 ]);

                  case 12:
                    return i.val instanceof Buffer ? (this.params[r].resetType(dbtype_1.DBType.VARBINARY), 
                    h = e, u = r, [ 4, j2db_1.J2DB.fromBuffer(i.val, this.params[r], this.connection) ]) : [ 3, 14 ];

                  case 13:
                    return h[u] = t.sent(), [ 3, 23 ];

                  case 14:
                    return i.val instanceof lob_1.Lob ? i.val.type !== dm_1.dmdb.BLOB ? [ 3, 16 ] : (this.params[r].resetType(dbtype_1.DBType.BLOB), 
                    c = e, a = r, [ 4, j2db_1.J2DB.fromBlob(i.val.iLob, this.params[r], this.connection) ]) : [ 3, 19 ];

                  case 15:
                    return c[a] = t.sent(), [ 3, 18 ];

                  case 16:
                    return this.params[r].resetType(dbtype_1.DBType.CLOB), o = e, _ = r, [ 4, j2db_1.J2DB.fromClob(i.val.iLob, this.params[r], this.connection) ];

                  case 17:
                    o[_] = t.sent(), t.label = 18;

                  case 18:
                    return [ 3, 23 ];

                  case 19:
                    return i.val instanceof Date ? (this.params[r].resetType(dbtype_1.DBType.DATETIME_TZ), 
                    e[r] = j2db_1.J2DB.fromDate(i.val, this.params[r], this.connection), [ 3, 23 ]) : [ 3, 20 ];

                  case 20:
                    return i.val instanceof stream_1.Readable ? (f = e, d = r, [ 4, j2db_1.J2DB.fromReadable(i.val, this.params[r], this.connection) ]) : [ 3, 22 ];

                  case 21:
                    return f[d] = t.sent(), [ 3, 23 ];

                  case 22:
                    throw error_1.DBError.ECJS_UNSUPPORTED_TYPE();

                  case 23:
                    return r++, [ 3, 1 ];

                  case 24:
                    return [ 2, e ];
                }
            });
        });
    }, w.prototype.genOutParamDatas = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, r, i, s, n;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    e = new Array(0), r = 0, t.label = 1;

                  case 1:
                    return r < this.execInfo.outParamDatas.length ? (i = this.execInfo.outParamDatas[r], 
                    this.params[r].ioType !== parameter_1.Parameter.IO_TYPE_OUT && this.params[r].ioType !== parameter_1.Parameter.IO_TYPE_INOUT ? [ 3, 3 ] : (n = (s = e).push, 
                    [ 4, db2j_1.DB2J.toNaturalJS(i, this.params[r], this.connection) ])) : [ 3, 4 ];

                  case 2:
                    n.apply(s, [ t.sent() ]), t.label = 3;

                  case 3:
                    return r++, [ 3, 1 ];

                  case 4:
                    return [ 2, e ];
                }
            });
        });
    }, w.BIND_IN = 1, w.BIND_OUT = 16, w;
}(exports.Statement = Statement);

exports.PreparedStatement = PreparedStatement;