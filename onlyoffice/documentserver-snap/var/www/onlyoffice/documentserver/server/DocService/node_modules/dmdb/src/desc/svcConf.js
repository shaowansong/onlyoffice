"use strict";

var __awaiter = this && this.__awaiter || function(e, c, i, o) {
    return new (i = i || Promise)(function(t, r) {
        function a(e) {
            try {
                n(o.next(e));
            } catch (e) {
                r(e);
            }
        }
        function s(e) {
            try {
                n(o.throw(e));
            } catch (e) {
                r(e);
            }
        }
        function n(e) {
            var r;
            e.done ? t(e.value) : ((r = e.value) instanceof i ? r : new i(function(e) {
                e(r);
            })).then(a, s);
        }
        n((o = o.apply(e, c || [])).next());
    });
}, __generator = this && this.__generator || function(t, a) {
    var s, n, c, i = {
        label: 0,
        sent: function() {
            if (1 & c[0]) throw c[1];
            return c[1];
        },
        trys: [],
        ops: []
    }, e = {
        next: r(0),
        throw: r(1),
        return: r(2)
    };
    return "function" == typeof Symbol && (e[Symbol.iterator] = function() {
        return this;
    }), e;
    function r(r) {
        return function(e) {
            return function(r) {
                if (s) throw new TypeError("Generator is already executing.");
                for (;i; ) try {
                    if (s = 1, n && (c = 2 & r[0] ? n.return : r[0] ? n.throw || ((c = n.return) && c.call(n), 
                    0) : n.next) && !(c = c.call(n, r[1])).done) return c;
                    switch (n = 0, c && (r = [ 2 & r[0], c.value ]), r[0]) {
                      case 0:
                      case 1:
                        c = r;
                        break;

                      case 4:
                        return i.label++, {
                            value: r[1],
                            done: !1
                        };

                      case 5:
                        i.label++, n = r[1], r = [ 0 ];
                        continue;

                      case 7:
                        r = i.ops.pop(), i.trys.pop();
                        continue;

                      default:
                        if (!(c = 0 < (c = i.trys).length && c[c.length - 1]) && (6 === r[0] || 2 === r[0])) {
                            i = 0;
                            continue;
                        }
                        if (3 === r[0] && (!c || r[1] > c[0] && r[1] < c[3])) {
                            i.label = r[1];
                            break;
                        }
                        if (6 === r[0] && i.label < c[1]) {
                            i.label = c[1], c = r;
                            break;
                        }
                        if (c && i.label < c[2]) {
                            i.label = c[2], i.ops.push(r);
                            break;
                        }
                        c[2] && i.ops.pop(), i.trys.pop();
                        continue;
                    }
                    r = a.call(t, i);
                } catch (e) {
                    r = [ 6, e ], n = 0;
                } finally {
                    s = c = 0;
                }
                if (5 & r[0]) throw r[1];
                return {
                    value: r[0] ? r[1] : void 0,
                    done: !0
                };
            }([ r, e ]);
        };
    }
}, __values = this && this.__values || function(e) {
    var r = "function" == typeof Symbol && Symbol.iterator, t = r && e[r], a = 0;
    if (t) return t.call(e);
    if (e && "number" == typeof e.length) return {
        next: function() {
            return e && a >= e.length && (e = void 0), {
                value: e && e[a++],
                done: !e
            };
        }
    };
    throw new TypeError(r ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var fs_1 = require("fs"), readline_1 = require("readline"), properties_1 = require("./properties"), epGroup_1 = require("./epGroup"), ep_1 = require("./ep"), const_1 = require("./const"), driverUtil_1 = require("../utils/driverUtil"), stringUtil_1 = require("../utils/stringUtil"), process_1 = require("process"), os_1 = require("os"), SvcConf = function() {
    function c() {
        this.logLevel = const_1.Const.LOG_OFF, this.logDir = process_1.cwd(), this.logFlushFreq = 30, 
        this.logBufferSize = 32768, this.serverGroupMap = new Map(), this.globalProperties = new properties_1.Properties();
    }
    return c.getDmsvcconfDefPath = function() {
        switch (os_1.platform()) {
          case "win32":
            return process.env.SystemRoot + "\\system32\\dm_svc.conf";

          case "linux":
            return "/etc/dm_svc.conf";

          default:
            return;
        }
    }, c.load = function(t, n) {
        return __awaiter(this, void 0, void 0, function() {
            var _ = this;
            return __generator(this, function(e) {
                return [ 2, new Promise(function(a, e) {
                    var i, o = new c(), s = !1, r = readline_1.createInterface({
                        input: fs_1.createReadStream(t).on("error", function() {
                            return __awaiter(_, void 0, void 0, function() {
                                var r, t;
                                return __generator(this, function(e) {
                                    switch (e.label) {
                                      case 0:
                                        return s ? [ 3, 4 ] : (s = !0, r = a, n ? (t = o, [ 3, 3 ]) : [ 3, 1 ]);

                                      case 1:
                                        return [ 4, this.load(this.getDmsvcconfDefPath() || "", !0) ];

                                      case 2:
                                        t = e.sent(), e.label = 3;

                                      case 3:
                                        r.apply(void 0, [ t ]), e.label = 4;

                                      case 4:
                                        return [ 2 ];
                                    }
                                });
                            });
                        })
                    });
                    r.on("error", function() {
                        return __awaiter(_, void 0, void 0, function() {
                            var r, t;
                            return __generator(this, function(e) {
                                switch (e.label) {
                                  case 0:
                                    return s ? [ 3, 4 ] : (s = !0, r = a, n ? (t = o, [ 3, 3 ]) : [ 3, 1 ]);

                                  case 1:
                                    return [ 4, this.load(this.getDmsvcconfDefPath() || "", !0) ];

                                  case 2:
                                    t = e.sent(), e.label = 3;

                                  case 3:
                                    r.apply(void 0, [ t ]), e.label = 4;

                                  case 4:
                                    return [ 2 ];
                                }
                            });
                        });
                    }), r.on("line", function(e) {
                        var r = e.indexOf("#");
                        if (-1 != r && (e = e.substring(0, r)), e = e.trim()) if (e.startsWith("[") && e.endsWith("]")) {
                            var t = e.substring(1, e.length - 1).toLowerCase();
                            if (!t || !o.serverGroupMap.has(t)) return;
                            (i = o.serverGroupMap.get(t).props) || (i = new properties_1.Properties(o.globalProperties), 
                            o.serverGroupMap.get(t).props = i);
                        } else {
                            var a = e.split("=");
                            if (a.length < 2) return;
                            var s, n = a[0].trim(), c = a[1].trim();
                            if (c.startsWith("(") && c.endsWith(")") && (c = c.substring(1, c.length - 1).trim()), 
                            !n || !c) return;
                            o.setServerGroupProperties(i || o.globalProperties, n, c) || (s = _.parseServerName(n, c)) && o.serverGroupMap.set(n.toLowerCase(), s);
                        }
                    }), r.on("close", function() {
                        a(o);
                    });
                }) ];
            });
        });
    }, c.parseServerName = function(e, r) {
        var t, a, s, n, c = r.split(","), i = new Array();
        try {
            for (var o = __values(c), _ = o.next(); !_.done; _ = o.next()) {
                var u, l, f = _.value, E = void 0, b = f.indexOf("["), S = -1;
                -1 !== b && (S = f.indexOf("]", b)), -1 === S ? (n = (s = f.split(":"))[0].trim(), 
                l = 2 <= s.length ? parseInt(s[1]) : const_1.Const.PORT_DEFAULT, E = new ep_1.EP(n, l), 
                i.push(E)) : (n = f.substring(b + 1, S), l = -1 !== (u = f.indexOf(":", S)) ? parseInt(f.substring(u + 1).trim()) : const_1.Const.PORT_DEFAULT, 
                E = new ep_1.EP(n, l), i.push(E));
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally {
            try {
                _ && !_.done && (a = o.return) && a.call(o);
            } finally {
                if (t) throw t.error;
            }
        }
        return 0 < i.length ? new epGroup_1.EPGroup(e, i) : void 0;
    }, c.parseLogLevel = function(e) {
        var r = e.getTrimString("logLevel", "");
        if (!r || stringUtil_1.StringUtil.isDigit(r)) return e.getNumber("logLevel", const_1.Const.LOG_OFF, const_1.Const.LOG_OFF, const_1.Const.LOG_ALL);
        switch (r.toLowerCase()) {
          case "debug":
            return const_1.Const.LOG_DEBUG;

          case "info":
            return const_1.Const.LOG_INFO;

          case "sql":
            return const_1.Const.LOG_SQL;

          case "warn":
            return const_1.Const.LOG_WARN;

          case "error":
            return const_1.Const.LOG_ERROR;

          case "off":
            return const_1.Const.LOG_OFF;

          case "all":
            return const_1.Const.LOG_ALL;

          default:
            return const_1.Const.LOG_OFF;
        }
    }, c.parseCompatibleMode = function(e) {
        var r = e.getTrimString("compatibleMode", "");
        return r && !stringUtil_1.StringUtil.isDigit(r) ? stringUtil_1.StringUtil.equalsIgnoreCase(r, "oracle") ? const_1.Const.COMPATIBLE_MODE_ORACLE : stringUtil_1.StringUtil.equalsIgnoreCase(r, "mysql") ? const_1.Const.COMPATIBLE_MODE_MYSQL : 0 : e.getNumber("compatibleMode", 0, 0, 2);
    }, c.prototype.setServerGroupProperties = function(e, r, t) {
        switch (r.toUpperCase()) {
          case "ADDRESS_REMAP":
            e.set("addressRemap", e.getTrimString("addressRemap", "") + "(" + t + ")");
            break;

          case "ALWAYS_ALLOW_COMMIT":
            e.set("alwaysAllowCommit", t);
            break;

          case "APP_NAME":
            e.set("appName", t);
            break;

          case "AUTO_COMMIT":
            e.set("autoCommit", t);
            break;

          case "BATCH_ALLOW_MAX_ERRORS":
            e.set("batchAllowMaxErrors", t);
            break;

          case "BATCH_CONTINUE_ON_ERROR":
          case "CONTINUE_BATCH_ON_ERROR":
            e.set("continueBatchOnError", t);
            break;

          case "BATCH_NOT_ON_CALL":
            e.set("batchNotOnCall", t);
            break;

          case "BATCH_TYPE":
            e.set("batchType", t);
            break;

          case "BUF_PREFETCH":
            e.set("bufPrefetch", t);
            break;

          case "CLUSTER":
            e.set("cluster", t);
            break;

          case "COLUMN_NAME_UPPER_CASE":
            e.set("columnNameUpperCase", t);
            break;

          case "COLUMN_NAME_CASE":
            e.set("columnNameCase", t);
            break;

          case "COMPATIBLE_MODE":
            e.set("compatibleMode", t);
            break;

          case "COMPRESS":
          case "COMPRESS_MSG":
            e.set("compress", t);
            break;

          case "COMPRESS_ID":
            e.set("compressID", t);
            break;

          case "CONNECT_TIMEOUT":
            e.set("connectTimeout", t);
            break;

          case "DO_SWITCH":
          case "AUTO_RECONNECT":
            e.set("doSwitch", t);
            break;

          case "ENABLE_RS_CACHE":
            e.set("enRsCache", t);
            break;

          case "EP_SELECTION":
            e.set("epSelector", t);
            break;

          case "ESCAPE_PROCESS":
            e.set("escapeProcess", t);
            break;

          case "IS_BDTA_RS":
            e.set("isBdtaRS", t);
            break;

          case "KEY_WORDS":
          case "KEYWORDS":
            e.set("keyWords", t);
            break;

          case "LANGUAGE":
            e.set("language", t);
            break;

          case "LOB_MODE":
            e.set("LobMode", t);
            break;

          case "LOG_DIR":
            e.set("logDir", t);
            break;

          case "LOG_FLUSH_FREQ":
            e.set("logFlushFreq", t);
            break;

          case "LOG_LEVEL":
            e.set("logLevel", t);
            break;

          case "LOGIN_CERTIFICATE":
            e.set("loginCertificate", t);
            break;

          case "LOGIN_DSC_CTRL":
            e.set("loginDscCtrl", t);
            break;

          case "LOGIN_ENCRYPT":
            e.set("loginEncrypt", t);
            break;

          case "LOGIN_MODE":
            e.set("loginMode", t);
            break;

          case "LOGIN_STATUS":
            e.set("loginStatus", t);
            break;

          case "MAX_ROWS":
            e.set("maxRows", t);
            break;

          case "MPP_LOCAL":
            e.set("mppLocal", t);
            break;

          case "OS_AUTH_TYPE":
            e.set("osAuthType", t);
            break;

          case "OS_NAME":
            e.set("osName", t);
            break;

          case "RS_CACHE_SIZE":
            e.set("rsCacheSize", t);
            break;

          case "RS_REFRESH_FREQ":
            e.set("rsRefreshFreq", t);
            break;

          case "RW_HA":
            e.set("rwHA", t);
            break;

          case "RW_IGNORE_SQL":
            e.set("rwIgnoreSql", t);
            break;

          case "RW_PERCENT":
            e.set("rwPercent", t);
            break;

          case "RW_SEPARATE":
            e.set("rwSeparate", t);
            break;

          case "RW_STANDBY_RECOVER_TIME":
            e.set("rwStandbyRecoverTime", t);
            break;

          case "SCHEMA":
            e.set("schema", t);
            break;

          case "SESS_ENCODE":
            e.set("sessEncode", t);
            break;

          case "SESSION_TIMEOUT":
            e.set("sessionTimeout", t);
            break;

          case "SSL_FILES_PATH":
            e.set("sslPath", t);
            break;

          case "SWITCH_INTERVAL":
            e.set("switchInterval", t);
            break;

          case "SWITCH_TIME":
          case "SWITCH_TIMES":
            e.set("switchTimes", t);
            break;

          case "TIME_ZONE":
            e.set("localTimezone", t);
            break;

          case "USER_REMAP":
            e.set("userRemap", e.getTrimString("userRemap", "") + "(" + t + ")");
            break;

          default:
            return !1;
        }
        return !0;
    }, c.prototype.setAttributes = function(e) {
        e && 0 !== e.size() && (this.logLevel = c.parseLogLevel(e), this.logDir = driverUtil_1.DriverUtil.formatDir(e.getTrimString("logDir", this.logDir)), 
        this.logBufferSize = e.getNumber("logBufferSize", this.logBufferSize, 1), this.logFlushFreq = e.getNumber("logflushFreq", this.logFlushFreq, 0));
    }, c.LOCALE = 0, c;
}();

exports.SvcConf = SvcConf;