"use strict";

var __awaiter = this && this.__awaiter || function(e, c, a, s) {
    return new (a = a || Promise)(function(t, r) {
        function n(e) {
            try {
                i(s.next(e));
            } catch (e) {
                r(e);
            }
        }
        function u(e) {
            try {
                i(s.throw(e));
            } catch (e) {
                r(e);
            }
        }
        function i(e) {
            var r;
            e.done ? t(e.value) : ((r = e.value) instanceof a ? r : new a(function(e) {
                e(r);
            })).then(n, u);
        }
        i((s = s.apply(e, c || [])).next());
    });
}, __generator = this && this.__generator || function(t, n) {
    var u, i, c, a = {
        label: 0,
        sent: function() {
            if (1 & c[0]) throw c[1];
            return c[1];
        },
        trys: [],
        ops: []
    }, e = {
        next: r(0),
        throw: r(1),
        return: r(2)
    };
    return "function" == typeof Symbol && (e[Symbol.iterator] = function() {
        return this;
    }), e;
    function r(r) {
        return function(e) {
            return function(r) {
                if (u) throw new TypeError("Generator is already executing.");
                for (;a; ) try {
                    if (u = 1, i && (c = 2 & r[0] ? i.return : r[0] ? i.throw || ((c = i.return) && c.call(i), 
                    0) : i.next) && !(c = c.call(i, r[1])).done) return c;
                    switch (i = 0, c && (r = [ 2 & r[0], c.value ]), r[0]) {
                      case 0:
                      case 1:
                        c = r;
                        break;

                      case 4:
                        return a.label++, {
                            value: r[1],
                            done: !1
                        };

                      case 5:
                        a.label++, i = r[1], r = [ 0 ];
                        continue;

                      case 7:
                        r = a.ops.pop(), a.trys.pop();
                        continue;

                      default:
                        if (!(c = 0 < (c = a.trys).length && c[c.length - 1]) && (6 === r[0] || 2 === r[0])) {
                            a = 0;
                            continue;
                        }
                        if (3 === r[0] && (!c || r[1] > c[0] && r[1] < c[3])) {
                            a.label = r[1];
                            break;
                        }
                        if (6 === r[0] && a.label < c[1]) {
                            a.label = c[1], c = r;
                            break;
                        }
                        if (c && a.label < c[2]) {
                            a.label = c[2], a.ops.push(r);
                            break;
                        }
                        c[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    r = n.call(t, a);
                } catch (e) {
                    r = [ 6, e ], i = 0;
                } finally {
                    u = c = 0;
                }
                if (5 & r[0]) throw r[1];
                return {
                    value: r[0] ? r[1] : void 0,
                    done: !0
                };
            }([ r, e ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var blob_1 = require("../driver/blob"), dbtype_1 = require("../driver/dbtype"), clob_1 = require("../driver/clob"), error_1 = require("../driver/error"), dateUtil_1 = require("../utils/dateUtil"), bufferUtil_1 = require("../utils/bufferUtil"), stringUtil_1 = require("../utils/stringUtil"), intervalDT_1 = require("../driver/intervalDT"), intervalYM_1 = require("../driver/intervalYM"), numeric_1 = require("../driver/numeric"), lob_1 = require("../driver/lob"), dm_1 = require("../dm"), DB2J = function() {
    function a() {}
    return a.toNaturalJS = function(n, u, i, c) {
        return __awaiter(this, void 0, void 0, function() {
            var r, t;
            return __generator(this, function(e) {
                switch (e.label) {
                  case 0:
                    if (null == n) return [ 2, null ];
                    switch (u.type) {
                      case dbtype_1.DBType.BOOLEAN:
                        return [ 3, 1 ];

                      case dbtype_1.DBType.BIT:
                        return [ 3, 2 ];

                      case dbtype_1.DBType.TINYINT:
                        return [ 3, 3 ];

                      case dbtype_1.DBType.SMALLINT:
                        return [ 3, 4 ];

                      case dbtype_1.DBType.INT:
                        return [ 3, 5 ];

                      case dbtype_1.DBType.BIGINT:
                        return [ 3, 6 ];

                      case dbtype_1.DBType.REAL:
                        return [ 3, 7 ];

                      case dbtype_1.DBType.DOUBLE:
                        return [ 3, 8 ];

                      case dbtype_1.DBType.DATE:
                      case dbtype_1.DBType.TIME:
                      case dbtype_1.DBType.DATETIME:
                      case dbtype_1.DBType.TIME_TZ:
                      case dbtype_1.DBType.DATETIME_TZ:
                        return [ 3, 9 ];

                      case dbtype_1.DBType.INTERVAL_DT:
                        return [ 3, 11 ];

                      case dbtype_1.DBType.INTERVAL_YM:
                        return [ 3, 12 ];

                      case dbtype_1.DBType.DECIMAL:
                        return [ 3, 13 ];

                      case dbtype_1.DBType.BINARY:
                      case dbtype_1.DBType.VARBINARY:
                        return [ 3, 14 ];

                      case dbtype_1.DBType.BLOB:
                        return [ 3, 15 ];

                      case dbtype_1.DBType.CLOB:
                        return [ 3, 17 ];

                      case dbtype_1.DBType.CHAR:
                      case dbtype_1.DBType.VARCHAR:
                      case dbtype_1.DBType.VARCHAR2:
                        return [ 3, 19 ];
                    }
                    return [ 3, 20 ];

                  case 1:
                    return [ 2, 0 != bufferUtil_1.BufferUtil.e(n, 0) ];

                  case 2:
                    return stringUtil_1.StringUtil.equalsIgnoreCase(u.typeName, "boolean") ? [ 2, 0 != bufferUtil_1.BufferUtil.e(n, 0) ] : [ 2, bufferUtil_1.BufferUtil.e(n, 0) ];

                  case 3:
                    return r = bufferUtil_1.BufferUtil.e(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 4:
                    return r = bufferUtil_1.BufferUtil.r(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 5:
                    return r = bufferUtil_1.BufferUtil.t(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 6:
                    return r = bufferUtil_1.BufferUtil.n(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 7:
                    return r = bufferUtil_1.BufferUtil.u(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 8:
                    return r = bufferUtil_1.BufferUtil.i(n, 0), [ 2, a.fetchNumberAsString(r, c) ];

                  case 9:
                    return t = dateUtil_1.DateUtil.decode(n, u.isBdta, u.type, u.scale, i.conn_prop_localTimezone, i.dbTimezone), 
                    [ 4, a.toDate(n, u, i, t) ];

                  case 10:
                    return r = e.sent(), [ 2, a.fetchDateAsString(r, t, a.getFormatString(u, i), i.oracleDateLanguage, c) ];

                  case 11:
                    return [ 2, new intervalDT_1.IntervalDT(n).toString() ];

                  case 12:
                    return [ 2, new intervalYM_1.IntervalYM(n).toString() ];

                  case 13:
                    if (r = new numeric_1.Numeric(n, u.prec, u.scale), void 0 === c) return dm_1.dmdb.fetchAsString.includes(dm_1.dmdb.NUMBER) ? [ 2, r.toString() ] : [ 2, r.toNumber() ];
                    if (c === dm_1.dmdb.STRING) return [ 2, r.toString() ];
                    e.label = 14;

                  case 14:
                    return [ 2, a.fetchBinaryAsString(n, c) ];

                  case 15:
                    return [ 4, a.toBlob(n, u, i) ];

                  case 16:
                    return r = e.sent(), [ 2, a.fetchBlobAsBuffer(r, c) ];

                  case 17:
                    return [ 4, a.toClob(n, u, i) ];

                  case 18:
                    return r = e.sent(), [ 2, a.fetchClobAsString(r, c) ];

                  case 19:
                    return [ 2, bufferUtil_1.BufferUtil.c(n, 0, n.length, i.getServerEncoding()) ];

                  case 20:
                    return [ 2, null ];
                }
            });
        });
    }, a.toBlob = function(r, t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                switch (t.type) {
                  case dbtype_1.DBType.BLOB:
                    return [ 2, blob_1.Blob.newBlobFromDB(r, n, t, n.lobFetchAll()) ];

                  default:
                    return [ 2, blob_1.Blob.newBlobOfLocal(r, n) ];
                }
                return [ 2 ];
            });
        });
    }, a.toClob = function(r, t, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                switch (t.type) {
                  case dbtype_1.DBType.CLOB:
                    return [ 2, clob_1.Clob.newClobFromDB(r, n, t, n.lobFetchAll()) ];

                  default:
                    throw error_1.DBError.ECJS_INVALID_COLUMN_TYPE();
                }
                return [ 2 ];
            });
        });
    }, a.toDate = function(n, u, i, c) {
        return __awaiter(this, void 0, void 0, function() {
            var r, t;
            return __generator(this, function(e) {
                switch (e.label) {
                  case 0:
                    switch (u.type) {
                      case dbtype_1.DBType.DATE:
                      case dbtype_1.DBType.TIME:
                      case dbtype_1.DBType.TIME_TZ:
                      case dbtype_1.DBType.DATETIME:
                      case dbtype_1.DBType.DATETIME_TZ:
                        return [ 3, 1 ];

                      case dbtype_1.DBType.CHAR:
                      case dbtype_1.DBType.VARCHAR:
                      case dbtype_1.DBType.VARCHAR2:
                      case dbtype_1.DBType.CLOB:
                        return [ 3, 2 ];
                    }
                    return [ 3, 4 ];

                  case 1:
                    return c = c || dateUtil_1.DateUtil.decode(n, u.isBdta, u.type, u.scale, i.conn_prop_localTimezone, i.dbTimezone), 
                    [ 2, dateUtil_1.DateUtil.toDateFromDT(c, i.conn_prop_localTimezone) ];

                  case 2:
                    return t = (r = dateUtil_1.DateUtil).toDateFromString, [ 4, this.charToString(n, u, i) ];

                  case 3:
                    return [ 2, t.apply(r, [ e.sent(), i.conn_prop_localTimezone ]) ];

                  case 4:
                    throw error_1.DBError.ECJS_DATA_CONVERTION_ERROR();
                }
            });
        });
    }, a.charToString = function(i, c, a) {
        return __awaiter(this, void 0, void 0, function() {
            var r, t, n, u;
            return __generator(this, function(e) {
                switch (e.label) {
                  case 0:
                    return c.type !== dbtype_1.DBType.VARCHAR2 ? [ 3, 1 ] : (i = this.processVarchar2(i, c.prec), 
                    [ 3, 4 ]);

                  case 1:
                    return c.type !== dbtype_1.DBType.CLOB ? [ 3, 4 ] : [ 4, clob_1.Clob.newClobFromDB(i, a, c, !0) ];

                  case 2:
                    return r = e.sent(), n = (t = r).getSubString, u = [ 1 ], [ 4, r.getLength() ];

                  case 3:
                    return [ 2, n.apply(t, u.concat([ e.sent() ])) ];

                  case 4:
                    return [ 2, bufferUtil_1.BufferUtil.c(i, 0, i.length, a.getServerEncoding()) ];
                }
            });
        });
    }, a.processVarchar2 = function(e, r) {
        var t = Buffer.alloc(r);
        t.copy(e, 0, 0, e.length);
        for (var n = e.length; n < t.length; n++) t[n] = 32;
        return t;
    }, a.fetchNumberAsString = function(e, r) {
        if (void 0 !== r) {
            if (r === dm_1.dmdb.STRING) return e.toString();
        } else if (dm_1.dmdb.fetchAsString.includes(dm_1.dmdb.NUMBER)) return e.toString();
        return e;
    }, a.getFormatString = function(e, r) {
        switch (e.type) {
          case dbtype_1.DBType.DATE:
            return r.formatDate || "";

          case dbtype_1.DBType.TIME:
            return r.formatTime || "";

          case dbtype_1.DBType.DATETIME:
            return r.formatTimestamp || "";

          case dbtype_1.DBType.TIME_TZ:
            return r.formatTimeTZ || "";

          case dbtype_1.DBType.DATETIME_TZ:
            return r.formatTimestampTZ || "";

          default:
            return "";
        }
    }, a.fetchDateAsString = function(e, r, t, n, u) {
        if (void 0 !== u) {
            if (u === dm_1.dmdb.STRING) return t ? dateUtil_1.DateUtil.toStringFromDT(r, t, n) : e.toUTCString();
        } else if (dm_1.dmdb.fetchAsString.includes(dm_1.dmdb.DATE)) return t ? dateUtil_1.DateUtil.toStringFromDT(r, t, n) : e.toUTCString();
        return e;
    }, a.fetchBinaryAsString = function(e, r) {
        if (void 0 !== r) {
            if (r === dm_1.dmdb.STRING) return e.toString("hex");
        } else if (dm_1.dmdb.fetchAsString.includes(dm_1.dmdb.BUFFER)) return e.toString("hex");
        return e;
    }, a.fetchClobAsString = function(a, s) {
        return __awaiter(this, void 0, void 0, function() {
            var r, t, n, u, i, c;
            return __generator(this, function(e) {
                switch (e.label) {
                  case 0:
                    return void 0 === s ? [ 3, 3 ] : s !== dm_1.dmdb.STRING ? [ 3, 2 ] : (t = (r = a).getSubString, 
                    n = [ 1 ], [ 4, a.getLength() ]);

                  case 1:
                    return [ 2, t.apply(r, n.concat([ e.sent() ])) ];

                  case 2:
                    return [ 3, 5 ];

                  case 3:
                    return dm_1.dmdb.fetchAsString.includes(dm_1.dmdb.CLOB) ? (i = (u = a).getSubString, 
                    c = [ 1 ], [ 4, a.getLength() ]) : [ 3, 5 ];

                  case 4:
                    return [ 2, i.apply(u, c.concat([ e.sent() ])) ];

                  case 5:
                    return [ 2, new lob_1.Lob(a) ];
                }
            });
        });
    }, a.fetchBlobAsBuffer = function(a, s) {
        return __awaiter(this, void 0, void 0, function() {
            var r, t, n, u, i, c;
            return __generator(this, function(e) {
                switch (e.label) {
                  case 0:
                    return void 0 === s ? [ 3, 3 ] : s !== dm_1.dmdb.BUFFER ? [ 3, 2 ] : (t = (r = a).getBytes, 
                    n = [ 1 ], [ 4, a.getLength() ]);

                  case 1:
                    return [ 2, t.apply(r, n.concat([ e.sent() ])) ];

                  case 2:
                    return [ 3, 5 ];

                  case 3:
                    return dm_1.dmdb.fetchAsBuffer.includes(dm_1.dmdb.BLOB) ? (i = (u = a).getBytes, 
                    c = [ 1 ], [ 4, a.getLength() ]) : [ 3, 5 ];

                  case 4:
                    return [ 2, i.apply(u, c.concat([ e.sent() ])) ];

                  case 5:
                    return [ 2, new lob_1.Lob(a) ];
                }
            });
        });
    }, a;
}();

exports.DB2J = DB2J;