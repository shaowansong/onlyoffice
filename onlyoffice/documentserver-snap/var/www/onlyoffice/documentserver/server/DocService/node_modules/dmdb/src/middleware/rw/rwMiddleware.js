"use strict";

var __awaiter = this && this.__awaiter || function(t, o, c, a) {
    return new (c = c || Promise)(function(n, r) {
        function e(t) {
            try {
                u(a.next(t));
            } catch (t) {
                r(t);
            }
        }
        function i(t) {
            try {
                u(a.throw(t));
            } catch (t) {
                r(t);
            }
        }
        function u(t) {
            var r;
            t.done ? n(t.value) : ((r = t.value) instanceof c ? r : new c(function(t) {
                t(r);
            })).then(e, i);
        }
        u((a = a.apply(t, o || [])).next());
    });
}, __generator = this && this.__generator || function(n, e) {
    var i, u, o, c = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    }, t = {
        next: r(0),
        throw: r(1),
        return: r(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function() {
        return this;
    }), t;
    function r(r) {
        return function(t) {
            return function(r) {
                if (i) throw new TypeError("Generator is already executing.");
                for (;c; ) try {
                    if (i = 1, u && (o = 2 & r[0] ? u.return : r[0] ? u.throw || ((o = u.return) && o.call(u), 
                    0) : u.next) && !(o = o.call(u, r[1])).done) return o;
                    switch (u = 0, o && (r = [ 2 & r[0], o.value ]), r[0]) {
                      case 0:
                      case 1:
                        o = r;
                        break;

                      case 4:
                        return c.label++, {
                            value: r[1],
                            done: !1
                        };

                      case 5:
                        c.label++, u = r[1], r = [ 0 ];
                        continue;

                      case 7:
                        r = c.ops.pop(), c.trys.pop();
                        continue;

                      default:
                        if (!(o = 0 < (o = c.trys).length && o[o.length - 1]) && (6 === r[0] || 2 === r[0])) {
                            c = 0;
                            continue;
                        }
                        if (3 === r[0] && (!o || r[1] > o[0] && r[1] < o[3])) {
                            c.label = r[1];
                            break;
                        }
                        if (6 === r[0] && c.label < o[1]) {
                            c.label = o[1], o = r;
                            break;
                        }
                        if (o && c.label < o[2]) {
                            c.label = o[2], c.ops.push(r);
                            break;
                        }
                        o[2] && c.ops.pop(), c.trys.pop();
                        continue;
                    }
                    r = e.call(n, c);
                } catch (t) {
                    r = [ 6, t ], u = 0;
                } finally {
                    i = o = 0;
                }
                if (5 & r[0]) throw r[1];
                return {
                    value: r[0] ? r[1] : void 0,
                    done: !0
                };
            }([ r, t ]);
        };
    }
};

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var rwUtil_1 = require("./rwUtil"), rwCounter_1 = require("./rwCounter"), RWMiddleware = function() {
    function t() {}
    return t.getInstance = function() {
        return this.instance;
    }, t.prototype.connection_openConnection = function(t, r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, rwUtil_1.RWUtil.connect(r, n) ];
            });
        });
    }, t.prototype.connection_execute = function(t, r, n, e, i) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, rwUtil_1.RWUtil.execute(r, n, function() {
                    return r.middlewares.rwInfo.connCurrent.do_execute(n, e, i);
                }, function(t) {
                    return t.do_execute(n, e, i);
                }) ];
            });
        });
    }, t.prototype.connection_executeMany = function(t, r, n, e, i) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, rwUtil_1.RWUtil.execute(r, n, function() {
                    return r.middlewares.rwInfo.connCurrent.do_executeMany(n, e, i);
                }, function(t) {
                    return t.do_executeMany(n, e, i);
                }) ];
            });
        });
    }, t.prototype.connection_createLob = function(r, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.connection_createLob(n, e) ];
            });
        });
    }, t.prototype.connection_close = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return t.trys.push([ 0, 3, , 4 ]), rwUtil_1.RWUtil.isStandbyAlive(n) ? [ 4, n.middlewares.rwInfo.connStandby.do_close() ] : [ 3, 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 3, 4 ];

                  case 3:
                    return t.sent(), [ 3, 4 ];

                  case 4:
                    return [ 2, r.connection_close(n) ];
                }
            });
        });
    }, t.prototype.connection_commit = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var r;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return t.trys.push([ 0, 3, , 5 ]), rwUtil_1.RWUtil.isStandbyAlive(e) ? [ 4, e.middlewares.rwInfo.connStandby.do_commit() ] : [ 3, 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 3, 5 ];

                  case 3:
                    return r = t.sent(), [ 4, rwUtil_1.RWUtil.afterExceptionOnStandby(e, r) ];

                  case 4:
                    return t.sent(), [ 3, 5 ];

                  case 5:
                    return [ 2, n.connection_commit(e) ];
                }
            });
        });
    }, t.prototype.connection_getStatementInfo = function(r, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.connection_getStatementInfo(n, e) ];
            });
        });
    }, t.prototype.connection_rollback = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var r;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return t.trys.push([ 0, 3, , 5 ]), rwUtil_1.RWUtil.isStandbyAlive(e) ? [ 4, e.middlewares.rwInfo.connStandby.do_rollback() ] : [ 3, 2 ];

                  case 1:
                    t.sent(), t.label = 2;

                  case 2:
                    return [ 3, 5 ];

                  case 3:
                    return r = t.sent(), [ 4, rwUtil_1.RWUtil.afterExceptionOnStandby(e, r) ];

                  case 4:
                    return t.sent(), [ 3, 5 ];

                  case 5:
                    return [ 2, n.connection_rollback(e) ];
                }
            });
        });
    }, t.prototype.lob_close = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.lob_close(n) ];
            });
        });
    }, t.prototype.lob_getData = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.lob_getData(n) ];
            });
        });
    }, t.prototype.lob_getLength = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.lob_getLength(n) ];
            });
        });
    }, t.prototype.pool_getConnection = function(n, e) {
        return __awaiter(this, void 0, void 0, function() {
            var r;
            return __generator(this, function(t) {
                switch (t.label) {
                  case 0:
                    return [ 4, n.pool_getConnection(e) ];

                  case 1:
                    return r = t.sent(), n.rwInfo.rwCounter = rwCounter_1.RWCounter.getInstance(r, r.standbyCount), 
                    [ 2, r ];
                }
            });
        });
    }, t.prototype.pool_close = function(r, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.pool_close(n, e) ];
            });
        });
    }, t.prototype.resultSet_close = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.resultSet_close(n) ];
            });
        });
    }, t.prototype.resultSet_getRow = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.resultSet_getRow(n) ];
            });
        });
    }, t.prototype.resultSet_getRows = function(r, n, e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.resultSet_getRows(n, e) ];
            });
        });
    }, t.prototype.resultSet_getRowCount = function(r, n) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [ 2, r.resultSet_getRowCount(n) ];
            });
        });
    }, t.instance = new t(), t;
}();

exports.RWMiddleware = RWMiddleware;