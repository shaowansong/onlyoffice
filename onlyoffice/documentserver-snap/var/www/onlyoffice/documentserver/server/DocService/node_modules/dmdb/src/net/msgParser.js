"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var msg_1 = require("./msg/msg"), MsgParser = function() {
    function t(t) {
        this._paused = !1, this._nextBuffers = new BufferList(), this._packetHeader = null, 
        this._packetOffset = null, this._buffer = Buffer.alloc(0), this._offset = 0, this._packetEnd = null, 
        this._onReceive = t.onReceive || function() {};
    }
    return t.prototype.write = function(t) {
        for (this._nextBuffers.push(t); !this._paused && (this._packetHeader = this._tryReadHeader(), 
        this._packetHeader); ) {
            var i = this._packetHeader.readInt32LE(msg_1.Msg.in);
            if (!this._combineNextBuffers(i)) break;
            var s = this._buffer.slice(this._offset, this._offset + i);
            this._offset += i, this._packetEnd = this._offset + i, this._packetOffset = this._offset;
            var h = Buffer.concat([ this._packetHeader, s ]);
            this._onReceive(h), this._packetHeader = null;
        }
    }, t.prototype._tryReadHeader = function() {
        if (this._packetHeader) return this._packetHeader;
        if (!this._combineNextBuffers(msg_1.Msg.lt)) return null;
        var t = this._buffer.slice(this._offset, this._offset + msg_1.Msg.lt);
        return this._offset += msg_1.Msg.lt, t;
    }, t.prototype._combineNextBuffers = function(t) {
        var i = this._buffer.length - this._offset;
        if (t <= i) return !0;
        if (i + this._nextBuffers.size < t) return !1;
        for (var s = Array(0), h = t - i; 0 < h; ) {
            var r = this._nextBuffers.shift();
            s.push(r), h -= r.length;
        }
        return this.append(s), !0;
    }, t.prototype.append = function(t) {
        if (t && 0 !== t.length) {
            for (var i = this._buffer.length, s = null === this._packetOffset ? this._offset : this._packetOffset, h = i - s, r = null, n = t instanceof Array || Array.isArray(t) ? t : [ t ], u = 0, f = 0, e = 0; e < n.length; e++) u += n[e].length;
            if (0 != h) {
                r = Buffer.alloc(h + u), f = 0, f += this._buffer.copy(r, 0, s, i);
                for (e = 0; e < n.length; e++) f += n[e].copy(r, f);
            } else if (1 < n.length) {
                r = Buffer.alloc(u);
                for (e = f = 0; e < n.length; e++) f += n[e].copy(r, f);
            } else r = n[0];
            this._buffer = r, this._offset = this._offset - s, this._packetEnd = null !== this._packetEnd ? this._packetEnd - s : null, 
            this._packetOffset = null !== this._packetOffset ? this._packetOffset - s : null;
        }
    }, t;
}();

exports.MsgParser = MsgParser;

var BufferList = function() {
    function t() {
        this.bufs = new Array(), this.size = 0;
    }
    return t.prototype.shift = function() {
        var t = this.bufs.shift();
        return t && (this.size -= t.length), t;
    }, t.prototype.push = function(t) {
        t && t.length && (this.bufs.push(t), this.size += t.length);
    }, t;
}();